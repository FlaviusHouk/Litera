/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NOTE_STORE_H
#define NOTE_STORE_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "note_store_types.h"

/* NoteStore service interface */
typedef struct _NoteStoreIf NoteStoreIf;  /* dummy object */

struct _NoteStoreIfInterface
{
  GTypeInterface parent;

  gboolean (*get_sync_state) (NoteStoreIf *iface, SyncState ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
  gboolean (*get_filtered_sync_chunk) (NoteStoreIf *iface, SyncChunk ** _return, const gchar * authenticationToken, const gint32 afterUSN, const gint32 maxEntries, const SyncChunkFilter * filter, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
  gboolean (*get_linked_notebook_sync_state) (NoteStoreIf *iface, SyncState ** _return, const gchar * authenticationToken, const LinkedNotebook * linkedNotebook, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_linked_notebook_sync_chunk) (NoteStoreIf *iface, SyncChunk ** _return, const gchar * authenticationToken, const LinkedNotebook * linkedNotebook, const gint32 afterUSN, const gint32 maxEntries, const gboolean fullSyncOnly, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*list_notebooks) (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
  gboolean (*list_accessible_business_notebooks) (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
  gboolean (*get_notebook) (NoteStoreIf *iface, Notebook ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_default_notebook) (NoteStoreIf *iface, Notebook ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
  gboolean (*create_notebook) (NoteStoreIf *iface, Notebook ** _return, const gchar * authenticationToken, const Notebook * notebook, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*update_notebook) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Notebook * notebook, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*expunge_notebook) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*list_tags) (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
  gboolean (*list_tags_by_notebook) (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, const Guid notebookGuid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_tag) (NoteStoreIf *iface, Tag ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*create_tag) (NoteStoreIf *iface, Tag ** _return, const gchar * authenticationToken, const Tag * tag, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*update_tag) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Tag * tag, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*untag_all) (NoteStoreIf *iface, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*expunge_tag) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*list_searches) (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
  gboolean (*get_search) (NoteStoreIf *iface, SavedSearch ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*create_search) (NoteStoreIf *iface, SavedSearch ** _return, const gchar * authenticationToken, const SavedSearch * search, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
  gboolean (*update_search) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const SavedSearch * search, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*expunge_search) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*find_note_offset) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const NoteFilter * filter, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*find_notes_metadata) (NoteStoreIf *iface, NotesMetadataList ** _return, const gchar * authenticationToken, const NoteFilter * filter, const gint32 offset, const gint32 maxNotes, const NotesMetadataResultSpec * resultSpec, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*find_note_counts) (NoteStoreIf *iface, NoteCollectionCounts ** _return, const gchar * authenticationToken, const NoteFilter * filter, const gboolean withTrash, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_note_with_result_spec) (NoteStoreIf *iface, Note ** _return, const gchar * authenticationToken, const Guid guid, const NoteResultSpec * resultSpec, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_note) (NoteStoreIf *iface, Note ** _return, const gchar * authenticationToken, const Guid guid, const gboolean withContent, const gboolean withResourcesData, const gboolean withResourcesRecognition, const gboolean withResourcesAlternateData, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_note_application_data) (NoteStoreIf *iface, LazyMap ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_note_application_data_entry) (NoteStoreIf *iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, const gchar * key, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*set_note_application_data_entry) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, const gchar * key, const gchar * value, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*unset_note_application_data_entry) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, const gchar * key, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_note_content) (NoteStoreIf *iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_note_search_text) (NoteStoreIf *iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, const gboolean noteOnly, const gboolean tokenizeForIndexing, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_resource_search_text) (NoteStoreIf *iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_note_tag_names) (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*create_note) (NoteStoreIf *iface, Note ** _return, const gchar * authenticationToken, const Note * note, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*update_note) (NoteStoreIf *iface, Note ** _return, const gchar * authenticationToken, const Note * note, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*delete_note) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*expunge_note) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*copy_note) (NoteStoreIf *iface, Note ** _return, const gchar * authenticationToken, const Guid noteGuid, const Guid toNotebookGuid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*list_note_versions) (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, const Guid noteGuid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_note_version) (NoteStoreIf *iface, Note ** _return, const gchar * authenticationToken, const Guid noteGuid, const gint32 updateSequenceNum, const gboolean withResourcesData, const gboolean withResourcesRecognition, const gboolean withResourcesAlternateData, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_resource) (NoteStoreIf *iface, Resource ** _return, const gchar * authenticationToken, const Guid guid, const gboolean withData, const gboolean withRecognition, const gboolean withAttributes, const gboolean withAlternateData, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_resource_application_data) (NoteStoreIf *iface, LazyMap ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_resource_application_data_entry) (NoteStoreIf *iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, const gchar * key, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*set_resource_application_data_entry) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, const gchar * key, const gchar * value, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*unset_resource_application_data_entry) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, const gchar * key, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*update_resource) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Resource * resource, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_resource_data) (NoteStoreIf *iface, GByteArray ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_resource_by_hash) (NoteStoreIf *iface, Resource ** _return, const gchar * authenticationToken, const Guid noteGuid, const GByteArray * contentHash, const gboolean withData, const gboolean withRecognition, const gboolean withAlternateData, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_resource_recognition) (NoteStoreIf *iface, GByteArray ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_resource_alternate_data) (NoteStoreIf *iface, GByteArray ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_resource_attributes) (NoteStoreIf *iface, ResourceAttributes ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_public_notebook) (NoteStoreIf *iface, Notebook ** _return, const UserID userId, const gchar * publicUri, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*share_notebook) (NoteStoreIf *iface, SharedNotebook ** _return, const gchar * authenticationToken, const SharedNotebook * sharedNotebook, const gchar * message, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*create_or_update_notebook_shares) (NoteStoreIf *iface, CreateOrUpdateNotebookSharesResult ** _return, const gchar * authenticationToken, const NotebookShareTemplate * shareTemplate, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, EDAMInvalidContactsException ** invalidContactsException, GError **error);
  gboolean (*update_shared_notebook) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const SharedNotebook * sharedNotebook, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*set_notebook_recipient_settings) (NoteStoreIf *iface, Notebook ** _return, const gchar * authenticationToken, const gchar * notebookGuid, const NotebookRecipientSettings * recipientSettings, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*list_shared_notebooks) (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*create_linked_notebook) (NoteStoreIf *iface, LinkedNotebook ** _return, const gchar * authenticationToken, const LinkedNotebook * linkedNotebook, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*update_linked_notebook) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const LinkedNotebook * linkedNotebook, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*list_linked_notebooks) (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*expunge_linked_notebook) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*authenticate_to_shared_notebook) (NoteStoreIf *iface, AuthenticationResult ** _return, const gchar * shareKeyOrGlobalId, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*get_shared_notebook_by_auth) (NoteStoreIf *iface, SharedNotebook ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*email_note) (NoteStoreIf *iface, const gchar * authenticationToken, const NoteEmailParameters * parameters, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*share_note) (NoteStoreIf *iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*stop_sharing_note) (NoteStoreIf *iface, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*authenticate_to_shared_note) (NoteStoreIf *iface, AuthenticationResult ** _return, const gchar * guid, const gchar * noteKey, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*find_related) (NoteStoreIf *iface, RelatedResult ** _return, const gchar * authenticationToken, const RelatedQuery * query, const RelatedResultSpec * resultSpec, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*update_note_if_usn_matches) (NoteStoreIf *iface, UpdateNoteIfUsnMatchesResult ** _return, const gchar * authenticationToken, const Note * note, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*manage_notebook_shares) (NoteStoreIf *iface, ManageNotebookSharesResult ** _return, const gchar * authenticationToken, const ManageNotebookSharesParameters * parameters, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*get_notebook_shares) (NoteStoreIf *iface, ShareRelationships ** _return, const gchar * authenticationToken, const gchar * notebookGuid, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
};
typedef struct _NoteStoreIfInterface NoteStoreIfInterface;

GType note_store_if_get_type (void);
#define TYPE_NOTE_STORE_IF (note_store_if_get_type())
#define NOTE_STORE_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_NOTE_STORE_IF, NoteStoreIf))
#define IS_NOTE_STORE_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_NOTE_STORE_IF))
#define NOTE_STORE_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_NOTE_STORE_IF, NoteStoreIfInterface))

gboolean note_store_if_get_sync_state (NoteStoreIf *iface, SyncState ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_if_get_filtered_sync_chunk (NoteStoreIf *iface, SyncChunk ** _return, const gchar * authenticationToken, const gint32 afterUSN, const gint32 maxEntries, const SyncChunkFilter * filter, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_if_get_linked_notebook_sync_state (NoteStoreIf *iface, SyncState ** _return, const gchar * authenticationToken, const LinkedNotebook * linkedNotebook, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_get_linked_notebook_sync_chunk (NoteStoreIf *iface, SyncChunk ** _return, const gchar * authenticationToken, const LinkedNotebook * linkedNotebook, const gint32 afterUSN, const gint32 maxEntries, const gboolean fullSyncOnly, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_list_notebooks (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_if_list_accessible_business_notebooks (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_if_get_notebook (NoteStoreIf *iface, Notebook ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_get_default_notebook (NoteStoreIf *iface, Notebook ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_if_create_notebook (NoteStoreIf *iface, Notebook ** _return, const gchar * authenticationToken, const Notebook * notebook, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_update_notebook (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Notebook * notebook, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_expunge_notebook (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_list_tags (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_if_list_tags_by_notebook (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, const Guid notebookGuid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_get_tag (NoteStoreIf *iface, Tag ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_create_tag (NoteStoreIf *iface, Tag ** _return, const gchar * authenticationToken, const Tag * tag, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_update_tag (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Tag * tag, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_untag_all (NoteStoreIf *iface, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_expunge_tag (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_list_searches (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_if_get_search (NoteStoreIf *iface, SavedSearch ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_create_search (NoteStoreIf *iface, SavedSearch ** _return, const gchar * authenticationToken, const SavedSearch * search, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_if_update_search (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const SavedSearch * search, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_expunge_search (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_find_note_offset (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const NoteFilter * filter, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_find_notes_metadata (NoteStoreIf *iface, NotesMetadataList ** _return, const gchar * authenticationToken, const NoteFilter * filter, const gint32 offset, const gint32 maxNotes, const NotesMetadataResultSpec * resultSpec, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_find_note_counts (NoteStoreIf *iface, NoteCollectionCounts ** _return, const gchar * authenticationToken, const NoteFilter * filter, const gboolean withTrash, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_get_note_with_result_spec (NoteStoreIf *iface, Note ** _return, const gchar * authenticationToken, const Guid guid, const NoteResultSpec * resultSpec, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_get_note (NoteStoreIf *iface, Note ** _return, const gchar * authenticationToken, const Guid guid, const gboolean withContent, const gboolean withResourcesData, const gboolean withResourcesRecognition, const gboolean withResourcesAlternateData, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_get_note_application_data (NoteStoreIf *iface, LazyMap ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_get_note_application_data_entry (NoteStoreIf *iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, const gchar * key, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_set_note_application_data_entry (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, const gchar * key, const gchar * value, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_unset_note_application_data_entry (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, const gchar * key, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_get_note_content (NoteStoreIf *iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_get_note_search_text (NoteStoreIf *iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, const gboolean noteOnly, const gboolean tokenizeForIndexing, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_get_resource_search_text (NoteStoreIf *iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_get_note_tag_names (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_create_note (NoteStoreIf *iface, Note ** _return, const gchar * authenticationToken, const Note * note, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_update_note (NoteStoreIf *iface, Note ** _return, const gchar * authenticationToken, const Note * note, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_delete_note (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_expunge_note (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_copy_note (NoteStoreIf *iface, Note ** _return, const gchar * authenticationToken, const Guid noteGuid, const Guid toNotebookGuid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_list_note_versions (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, const Guid noteGuid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_get_note_version (NoteStoreIf *iface, Note ** _return, const gchar * authenticationToken, const Guid noteGuid, const gint32 updateSequenceNum, const gboolean withResourcesData, const gboolean withResourcesRecognition, const gboolean withResourcesAlternateData, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_get_resource (NoteStoreIf *iface, Resource ** _return, const gchar * authenticationToken, const Guid guid, const gboolean withData, const gboolean withRecognition, const gboolean withAttributes, const gboolean withAlternateData, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_get_resource_application_data (NoteStoreIf *iface, LazyMap ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_get_resource_application_data_entry (NoteStoreIf *iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, const gchar * key, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_set_resource_application_data_entry (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, const gchar * key, const gchar * value, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_unset_resource_application_data_entry (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, const gchar * key, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_update_resource (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Resource * resource, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_get_resource_data (NoteStoreIf *iface, GByteArray ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_get_resource_by_hash (NoteStoreIf *iface, Resource ** _return, const gchar * authenticationToken, const Guid noteGuid, const GByteArray * contentHash, const gboolean withData, const gboolean withRecognition, const gboolean withAlternateData, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_get_resource_recognition (NoteStoreIf *iface, GByteArray ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_get_resource_alternate_data (NoteStoreIf *iface, GByteArray ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_get_resource_attributes (NoteStoreIf *iface, ResourceAttributes ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_get_public_notebook (NoteStoreIf *iface, Notebook ** _return, const UserID userId, const gchar * publicUri, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_share_notebook (NoteStoreIf *iface, SharedNotebook ** _return, const gchar * authenticationToken, const SharedNotebook * sharedNotebook, const gchar * message, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_if_create_or_update_notebook_shares (NoteStoreIf *iface, CreateOrUpdateNotebookSharesResult ** _return, const gchar * authenticationToken, const NotebookShareTemplate * shareTemplate, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, EDAMInvalidContactsException ** invalidContactsException, GError **error);
gboolean note_store_if_update_shared_notebook (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const SharedNotebook * sharedNotebook, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_if_set_notebook_recipient_settings (NoteStoreIf *iface, Notebook ** _return, const gchar * authenticationToken, const gchar * notebookGuid, const NotebookRecipientSettings * recipientSettings, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_if_list_shared_notebooks (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_if_create_linked_notebook (NoteStoreIf *iface, LinkedNotebook ** _return, const gchar * authenticationToken, const LinkedNotebook * linkedNotebook, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_if_update_linked_notebook (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const LinkedNotebook * linkedNotebook, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_if_list_linked_notebooks (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_if_expunge_linked_notebook (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_if_authenticate_to_shared_notebook (NoteStoreIf *iface, AuthenticationResult ** _return, const gchar * shareKeyOrGlobalId, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_if_get_shared_notebook_by_auth (NoteStoreIf *iface, SharedNotebook ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_if_email_note (NoteStoreIf *iface, const gchar * authenticationToken, const NoteEmailParameters * parameters, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_if_share_note (NoteStoreIf *iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_if_stop_sharing_note (NoteStoreIf *iface, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_if_authenticate_to_shared_note (NoteStoreIf *iface, AuthenticationResult ** _return, const gchar * guid, const gchar * noteKey, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_if_find_related (NoteStoreIf *iface, RelatedResult ** _return, const gchar * authenticationToken, const RelatedQuery * query, const RelatedResultSpec * resultSpec, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_if_update_note_if_usn_matches (NoteStoreIf *iface, UpdateNoteIfUsnMatchesResult ** _return, const gchar * authenticationToken, const Note * note, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_if_manage_notebook_shares (NoteStoreIf *iface, ManageNotebookSharesResult ** _return, const gchar * authenticationToken, const ManageNotebookSharesParameters * parameters, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_if_get_notebook_shares (NoteStoreIf *iface, ShareRelationships ** _return, const gchar * authenticationToken, const gchar * notebookGuid, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);

/* NoteStore service client */
struct _NoteStoreClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _NoteStoreClient NoteStoreClient;

struct _NoteStoreClientClass
{
  GObjectClass parent;
};
typedef struct _NoteStoreClientClass NoteStoreClientClass;

GType note_store_client_get_type (void);
#define TYPE_NOTE_STORE_CLIENT (note_store_client_get_type())
#define NOTE_STORE_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_NOTE_STORE_CLIENT, NoteStoreClient))
#define NOTE_STORE_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_NOTE_STORE_CLIENT, NoteStoreClientClass))
#define NOTE_STORE_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_NOTE_STORE_CLIENT))
#define NOTE_STORE_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_NOTE_STORE_CLIENT))
#define NOTE_STORE_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_NOTE_STORE_CLIENT, NoteStoreClientClass))

gboolean note_store_client_get_sync_state (NoteStoreIf * iface, SyncState ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_get_sync_state (NoteStoreIf * iface, const gchar * authenticationToken, GError ** error);
gboolean note_store_client_recv_get_sync_state (NoteStoreIf * iface, SyncState ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_get_filtered_sync_chunk (NoteStoreIf * iface, SyncChunk ** _return, const gchar * authenticationToken, const gint32 afterUSN, const gint32 maxEntries, const SyncChunkFilter * filter, EDAMUserException ** userException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_get_filtered_sync_chunk (NoteStoreIf * iface, const gchar * authenticationToken, const gint32 afterUSN, const gint32 maxEntries, const SyncChunkFilter * filter, GError ** error);
gboolean note_store_client_recv_get_filtered_sync_chunk (NoteStoreIf * iface, SyncChunk ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_get_linked_notebook_sync_state (NoteStoreIf * iface, SyncState ** _return, const gchar * authenticationToken, const LinkedNotebook * linkedNotebook, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_get_linked_notebook_sync_state (NoteStoreIf * iface, const gchar * authenticationToken, const LinkedNotebook * linkedNotebook, GError ** error);
gboolean note_store_client_recv_get_linked_notebook_sync_state (NoteStoreIf * iface, SyncState ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_get_linked_notebook_sync_chunk (NoteStoreIf * iface, SyncChunk ** _return, const gchar * authenticationToken, const LinkedNotebook * linkedNotebook, const gint32 afterUSN, const gint32 maxEntries, const gboolean fullSyncOnly, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_get_linked_notebook_sync_chunk (NoteStoreIf * iface, const gchar * authenticationToken, const LinkedNotebook * linkedNotebook, const gint32 afterUSN, const gint32 maxEntries, const gboolean fullSyncOnly, GError ** error);
gboolean note_store_client_recv_get_linked_notebook_sync_chunk (NoteStoreIf * iface, SyncChunk ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_list_notebooks (NoteStoreIf * iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_list_notebooks (NoteStoreIf * iface, const gchar * authenticationToken, GError ** error);
gboolean note_store_client_recv_list_notebooks (NoteStoreIf * iface, GPtrArray ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_list_accessible_business_notebooks (NoteStoreIf * iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_list_accessible_business_notebooks (NoteStoreIf * iface, const gchar * authenticationToken, GError ** error);
gboolean note_store_client_recv_list_accessible_business_notebooks (NoteStoreIf * iface, GPtrArray ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_get_notebook (NoteStoreIf * iface, Notebook ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_get_notebook (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, GError ** error);
gboolean note_store_client_recv_get_notebook (NoteStoreIf * iface, Notebook ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_get_default_notebook (NoteStoreIf * iface, Notebook ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_get_default_notebook (NoteStoreIf * iface, const gchar * authenticationToken, GError ** error);
gboolean note_store_client_recv_get_default_notebook (NoteStoreIf * iface, Notebook ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_create_notebook (NoteStoreIf * iface, Notebook ** _return, const gchar * authenticationToken, const Notebook * notebook, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_create_notebook (NoteStoreIf * iface, const gchar * authenticationToken, const Notebook * notebook, GError ** error);
gboolean note_store_client_recv_create_notebook (NoteStoreIf * iface, Notebook ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_update_notebook (NoteStoreIf * iface, gint32* _return, const gchar * authenticationToken, const Notebook * notebook, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_update_notebook (NoteStoreIf * iface, const gchar * authenticationToken, const Notebook * notebook, GError ** error);
gboolean note_store_client_recv_update_notebook (NoteStoreIf * iface, gint32* _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_expunge_notebook (NoteStoreIf * iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_expunge_notebook (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, GError ** error);
gboolean note_store_client_recv_expunge_notebook (NoteStoreIf * iface, gint32* _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_list_tags (NoteStoreIf * iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_list_tags (NoteStoreIf * iface, const gchar * authenticationToken, GError ** error);
gboolean note_store_client_recv_list_tags (NoteStoreIf * iface, GPtrArray ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_list_tags_by_notebook (NoteStoreIf * iface, GPtrArray ** _return, const gchar * authenticationToken, const Guid notebookGuid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_list_tags_by_notebook (NoteStoreIf * iface, const gchar * authenticationToken, const Guid notebookGuid, GError ** error);
gboolean note_store_client_recv_list_tags_by_notebook (NoteStoreIf * iface, GPtrArray ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_get_tag (NoteStoreIf * iface, Tag ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_get_tag (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, GError ** error);
gboolean note_store_client_recv_get_tag (NoteStoreIf * iface, Tag ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_create_tag (NoteStoreIf * iface, Tag ** _return, const gchar * authenticationToken, const Tag * tag, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_create_tag (NoteStoreIf * iface, const gchar * authenticationToken, const Tag * tag, GError ** error);
gboolean note_store_client_recv_create_tag (NoteStoreIf * iface, Tag ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_update_tag (NoteStoreIf * iface, gint32* _return, const gchar * authenticationToken, const Tag * tag, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_update_tag (NoteStoreIf * iface, const gchar * authenticationToken, const Tag * tag, GError ** error);
gboolean note_store_client_recv_update_tag (NoteStoreIf * iface, gint32* _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_untag_all (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_untag_all (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, GError ** error);
gboolean note_store_client_recv_untag_all (NoteStoreIf * iface, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_expunge_tag (NoteStoreIf * iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_expunge_tag (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, GError ** error);
gboolean note_store_client_recv_expunge_tag (NoteStoreIf * iface, gint32* _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_list_searches (NoteStoreIf * iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_list_searches (NoteStoreIf * iface, const gchar * authenticationToken, GError ** error);
gboolean note_store_client_recv_list_searches (NoteStoreIf * iface, GPtrArray ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_get_search (NoteStoreIf * iface, SavedSearch ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_get_search (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, GError ** error);
gboolean note_store_client_recv_get_search (NoteStoreIf * iface, SavedSearch ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_create_search (NoteStoreIf * iface, SavedSearch ** _return, const gchar * authenticationToken, const SavedSearch * search, EDAMUserException ** userException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_create_search (NoteStoreIf * iface, const gchar * authenticationToken, const SavedSearch * search, GError ** error);
gboolean note_store_client_recv_create_search (NoteStoreIf * iface, SavedSearch ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_update_search (NoteStoreIf * iface, gint32* _return, const gchar * authenticationToken, const SavedSearch * search, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_update_search (NoteStoreIf * iface, const gchar * authenticationToken, const SavedSearch * search, GError ** error);
gboolean note_store_client_recv_update_search (NoteStoreIf * iface, gint32* _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_expunge_search (NoteStoreIf * iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_expunge_search (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, GError ** error);
gboolean note_store_client_recv_expunge_search (NoteStoreIf * iface, gint32* _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_find_note_offset (NoteStoreIf * iface, gint32* _return, const gchar * authenticationToken, const NoteFilter * filter, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_find_note_offset (NoteStoreIf * iface, const gchar * authenticationToken, const NoteFilter * filter, const Guid guid, GError ** error);
gboolean note_store_client_recv_find_note_offset (NoteStoreIf * iface, gint32* _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_find_notes_metadata (NoteStoreIf * iface, NotesMetadataList ** _return, const gchar * authenticationToken, const NoteFilter * filter, const gint32 offset, const gint32 maxNotes, const NotesMetadataResultSpec * resultSpec, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_find_notes_metadata (NoteStoreIf * iface, const gchar * authenticationToken, const NoteFilter * filter, const gint32 offset, const gint32 maxNotes, const NotesMetadataResultSpec * resultSpec, GError ** error);
gboolean note_store_client_recv_find_notes_metadata (NoteStoreIf * iface, NotesMetadataList ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_find_note_counts (NoteStoreIf * iface, NoteCollectionCounts ** _return, const gchar * authenticationToken, const NoteFilter * filter, const gboolean withTrash, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_find_note_counts (NoteStoreIf * iface, const gchar * authenticationToken, const NoteFilter * filter, const gboolean withTrash, GError ** error);
gboolean note_store_client_recv_find_note_counts (NoteStoreIf * iface, NoteCollectionCounts ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_get_note_with_result_spec (NoteStoreIf * iface, Note ** _return, const gchar * authenticationToken, const Guid guid, const NoteResultSpec * resultSpec, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_get_note_with_result_spec (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, const NoteResultSpec * resultSpec, GError ** error);
gboolean note_store_client_recv_get_note_with_result_spec (NoteStoreIf * iface, Note ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_get_note (NoteStoreIf * iface, Note ** _return, const gchar * authenticationToken, const Guid guid, const gboolean withContent, const gboolean withResourcesData, const gboolean withResourcesRecognition, const gboolean withResourcesAlternateData, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_get_note (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, const gboolean withContent, const gboolean withResourcesData, const gboolean withResourcesRecognition, const gboolean withResourcesAlternateData, GError ** error);
gboolean note_store_client_recv_get_note (NoteStoreIf * iface, Note ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_get_note_application_data (NoteStoreIf * iface, LazyMap ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_get_note_application_data (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, GError ** error);
gboolean note_store_client_recv_get_note_application_data (NoteStoreIf * iface, LazyMap ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_get_note_application_data_entry (NoteStoreIf * iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, const gchar * key, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_get_note_application_data_entry (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, const gchar * key, GError ** error);
gboolean note_store_client_recv_get_note_application_data_entry (NoteStoreIf * iface, gchar ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_set_note_application_data_entry (NoteStoreIf * iface, gint32* _return, const gchar * authenticationToken, const Guid guid, const gchar * key, const gchar * value, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_set_note_application_data_entry (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, const gchar * key, const gchar * value, GError ** error);
gboolean note_store_client_recv_set_note_application_data_entry (NoteStoreIf * iface, gint32* _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_unset_note_application_data_entry (NoteStoreIf * iface, gint32* _return, const gchar * authenticationToken, const Guid guid, const gchar * key, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_unset_note_application_data_entry (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, const gchar * key, GError ** error);
gboolean note_store_client_recv_unset_note_application_data_entry (NoteStoreIf * iface, gint32* _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_get_note_content (NoteStoreIf * iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_get_note_content (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, GError ** error);
gboolean note_store_client_recv_get_note_content (NoteStoreIf * iface, gchar ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_get_note_search_text (NoteStoreIf * iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, const gboolean noteOnly, const gboolean tokenizeForIndexing, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_get_note_search_text (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, const gboolean noteOnly, const gboolean tokenizeForIndexing, GError ** error);
gboolean note_store_client_recv_get_note_search_text (NoteStoreIf * iface, gchar ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_get_resource_search_text (NoteStoreIf * iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_get_resource_search_text (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, GError ** error);
gboolean note_store_client_recv_get_resource_search_text (NoteStoreIf * iface, gchar ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_get_note_tag_names (NoteStoreIf * iface, GPtrArray ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_get_note_tag_names (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, GError ** error);
gboolean note_store_client_recv_get_note_tag_names (NoteStoreIf * iface, GPtrArray ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_create_note (NoteStoreIf * iface, Note ** _return, const gchar * authenticationToken, const Note * note, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_create_note (NoteStoreIf * iface, const gchar * authenticationToken, const Note * note, GError ** error);
gboolean note_store_client_recv_create_note (NoteStoreIf * iface, Note ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_update_note (NoteStoreIf * iface, Note ** _return, const gchar * authenticationToken, const Note * note, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_update_note (NoteStoreIf * iface, const gchar * authenticationToken, const Note * note, GError ** error);
gboolean note_store_client_recv_update_note (NoteStoreIf * iface, Note ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_delete_note (NoteStoreIf * iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_delete_note (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, GError ** error);
gboolean note_store_client_recv_delete_note (NoteStoreIf * iface, gint32* _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_expunge_note (NoteStoreIf * iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_expunge_note (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, GError ** error);
gboolean note_store_client_recv_expunge_note (NoteStoreIf * iface, gint32* _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_copy_note (NoteStoreIf * iface, Note ** _return, const gchar * authenticationToken, const Guid noteGuid, const Guid toNotebookGuid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_copy_note (NoteStoreIf * iface, const gchar * authenticationToken, const Guid noteGuid, const Guid toNotebookGuid, GError ** error);
gboolean note_store_client_recv_copy_note (NoteStoreIf * iface, Note ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_list_note_versions (NoteStoreIf * iface, GPtrArray ** _return, const gchar * authenticationToken, const Guid noteGuid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_list_note_versions (NoteStoreIf * iface, const gchar * authenticationToken, const Guid noteGuid, GError ** error);
gboolean note_store_client_recv_list_note_versions (NoteStoreIf * iface, GPtrArray ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_get_note_version (NoteStoreIf * iface, Note ** _return, const gchar * authenticationToken, const Guid noteGuid, const gint32 updateSequenceNum, const gboolean withResourcesData, const gboolean withResourcesRecognition, const gboolean withResourcesAlternateData, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_get_note_version (NoteStoreIf * iface, const gchar * authenticationToken, const Guid noteGuid, const gint32 updateSequenceNum, const gboolean withResourcesData, const gboolean withResourcesRecognition, const gboolean withResourcesAlternateData, GError ** error);
gboolean note_store_client_recv_get_note_version (NoteStoreIf * iface, Note ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_get_resource (NoteStoreIf * iface, Resource ** _return, const gchar * authenticationToken, const Guid guid, const gboolean withData, const gboolean withRecognition, const gboolean withAttributes, const gboolean withAlternateData, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_get_resource (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, const gboolean withData, const gboolean withRecognition, const gboolean withAttributes, const gboolean withAlternateData, GError ** error);
gboolean note_store_client_recv_get_resource (NoteStoreIf * iface, Resource ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_get_resource_application_data (NoteStoreIf * iface, LazyMap ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_get_resource_application_data (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, GError ** error);
gboolean note_store_client_recv_get_resource_application_data (NoteStoreIf * iface, LazyMap ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_get_resource_application_data_entry (NoteStoreIf * iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, const gchar * key, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_get_resource_application_data_entry (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, const gchar * key, GError ** error);
gboolean note_store_client_recv_get_resource_application_data_entry (NoteStoreIf * iface, gchar ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_set_resource_application_data_entry (NoteStoreIf * iface, gint32* _return, const gchar * authenticationToken, const Guid guid, const gchar * key, const gchar * value, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_set_resource_application_data_entry (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, const gchar * key, const gchar * value, GError ** error);
gboolean note_store_client_recv_set_resource_application_data_entry (NoteStoreIf * iface, gint32* _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_unset_resource_application_data_entry (NoteStoreIf * iface, gint32* _return, const gchar * authenticationToken, const Guid guid, const gchar * key, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_unset_resource_application_data_entry (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, const gchar * key, GError ** error);
gboolean note_store_client_recv_unset_resource_application_data_entry (NoteStoreIf * iface, gint32* _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_update_resource (NoteStoreIf * iface, gint32* _return, const gchar * authenticationToken, const Resource * resource, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_update_resource (NoteStoreIf * iface, const gchar * authenticationToken, const Resource * resource, GError ** error);
gboolean note_store_client_recv_update_resource (NoteStoreIf * iface, gint32* _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_get_resource_data (NoteStoreIf * iface, GByteArray ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_get_resource_data (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, GError ** error);
gboolean note_store_client_recv_get_resource_data (NoteStoreIf * iface, GByteArray ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_get_resource_by_hash (NoteStoreIf * iface, Resource ** _return, const gchar * authenticationToken, const Guid noteGuid, const GByteArray * contentHash, const gboolean withData, const gboolean withRecognition, const gboolean withAlternateData, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_get_resource_by_hash (NoteStoreIf * iface, const gchar * authenticationToken, const Guid noteGuid, const GByteArray * contentHash, const gboolean withData, const gboolean withRecognition, const gboolean withAlternateData, GError ** error);
gboolean note_store_client_recv_get_resource_by_hash (NoteStoreIf * iface, Resource ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_get_resource_recognition (NoteStoreIf * iface, GByteArray ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_get_resource_recognition (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, GError ** error);
gboolean note_store_client_recv_get_resource_recognition (NoteStoreIf * iface, GByteArray ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_get_resource_alternate_data (NoteStoreIf * iface, GByteArray ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_get_resource_alternate_data (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, GError ** error);
gboolean note_store_client_recv_get_resource_alternate_data (NoteStoreIf * iface, GByteArray ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_get_resource_attributes (NoteStoreIf * iface, ResourceAttributes ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_get_resource_attributes (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, GError ** error);
gboolean note_store_client_recv_get_resource_attributes (NoteStoreIf * iface, ResourceAttributes ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_get_public_notebook (NoteStoreIf * iface, Notebook ** _return, const UserID userId, const gchar * publicUri, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_get_public_notebook (NoteStoreIf * iface, const UserID userId, const gchar * publicUri, GError ** error);
gboolean note_store_client_recv_get_public_notebook (NoteStoreIf * iface, Notebook ** _return, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_share_notebook (NoteStoreIf * iface, SharedNotebook ** _return, const gchar * authenticationToken, const SharedNotebook * sharedNotebook, const gchar * message, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_share_notebook (NoteStoreIf * iface, const gchar * authenticationToken, const SharedNotebook * sharedNotebook, const gchar * message, GError ** error);
gboolean note_store_client_recv_share_notebook (NoteStoreIf * iface, SharedNotebook ** _return, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_create_or_update_notebook_shares (NoteStoreIf * iface, CreateOrUpdateNotebookSharesResult ** _return, const gchar * authenticationToken, const NotebookShareTemplate * shareTemplate, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, EDAMInvalidContactsException ** invalidContactsException, GError ** error);
gboolean note_store_client_send_create_or_update_notebook_shares (NoteStoreIf * iface, const gchar * authenticationToken, const NotebookShareTemplate * shareTemplate, GError ** error);
gboolean note_store_client_recv_create_or_update_notebook_shares (NoteStoreIf * iface, CreateOrUpdateNotebookSharesResult ** _return, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, EDAMInvalidContactsException ** invalidContactsException, GError ** error);
gboolean note_store_client_update_shared_notebook (NoteStoreIf * iface, gint32* _return, const gchar * authenticationToken, const SharedNotebook * sharedNotebook, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_update_shared_notebook (NoteStoreIf * iface, const gchar * authenticationToken, const SharedNotebook * sharedNotebook, GError ** error);
gboolean note_store_client_recv_update_shared_notebook (NoteStoreIf * iface, gint32* _return, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_set_notebook_recipient_settings (NoteStoreIf * iface, Notebook ** _return, const gchar * authenticationToken, const gchar * notebookGuid, const NotebookRecipientSettings * recipientSettings, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_set_notebook_recipient_settings (NoteStoreIf * iface, const gchar * authenticationToken, const gchar * notebookGuid, const NotebookRecipientSettings * recipientSettings, GError ** error);
gboolean note_store_client_recv_set_notebook_recipient_settings (NoteStoreIf * iface, Notebook ** _return, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_list_shared_notebooks (NoteStoreIf * iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_list_shared_notebooks (NoteStoreIf * iface, const gchar * authenticationToken, GError ** error);
gboolean note_store_client_recv_list_shared_notebooks (NoteStoreIf * iface, GPtrArray ** _return, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_create_linked_notebook (NoteStoreIf * iface, LinkedNotebook ** _return, const gchar * authenticationToken, const LinkedNotebook * linkedNotebook, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_create_linked_notebook (NoteStoreIf * iface, const gchar * authenticationToken, const LinkedNotebook * linkedNotebook, GError ** error);
gboolean note_store_client_recv_create_linked_notebook (NoteStoreIf * iface, LinkedNotebook ** _return, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_update_linked_notebook (NoteStoreIf * iface, gint32* _return, const gchar * authenticationToken, const LinkedNotebook * linkedNotebook, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_update_linked_notebook (NoteStoreIf * iface, const gchar * authenticationToken, const LinkedNotebook * linkedNotebook, GError ** error);
gboolean note_store_client_recv_update_linked_notebook (NoteStoreIf * iface, gint32* _return, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_list_linked_notebooks (NoteStoreIf * iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_list_linked_notebooks (NoteStoreIf * iface, const gchar * authenticationToken, GError ** error);
gboolean note_store_client_recv_list_linked_notebooks (NoteStoreIf * iface, GPtrArray ** _return, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_expunge_linked_notebook (NoteStoreIf * iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_expunge_linked_notebook (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, GError ** error);
gboolean note_store_client_recv_expunge_linked_notebook (NoteStoreIf * iface, gint32* _return, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_authenticate_to_shared_notebook (NoteStoreIf * iface, AuthenticationResult ** _return, const gchar * shareKeyOrGlobalId, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_authenticate_to_shared_notebook (NoteStoreIf * iface, const gchar * shareKeyOrGlobalId, const gchar * authenticationToken, GError ** error);
gboolean note_store_client_recv_authenticate_to_shared_notebook (NoteStoreIf * iface, AuthenticationResult ** _return, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_get_shared_notebook_by_auth (NoteStoreIf * iface, SharedNotebook ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_get_shared_notebook_by_auth (NoteStoreIf * iface, const gchar * authenticationToken, GError ** error);
gboolean note_store_client_recv_get_shared_notebook_by_auth (NoteStoreIf * iface, SharedNotebook ** _return, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_email_note (NoteStoreIf * iface, const gchar * authenticationToken, const NoteEmailParameters * parameters, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_email_note (NoteStoreIf * iface, const gchar * authenticationToken, const NoteEmailParameters * parameters, GError ** error);
gboolean note_store_client_recv_email_note (NoteStoreIf * iface, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_share_note (NoteStoreIf * iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_share_note (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, GError ** error);
gboolean note_store_client_recv_share_note (NoteStoreIf * iface, gchar ** _return, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_stop_sharing_note (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_stop_sharing_note (NoteStoreIf * iface, const gchar * authenticationToken, const Guid guid, GError ** error);
gboolean note_store_client_recv_stop_sharing_note (NoteStoreIf * iface, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_authenticate_to_shared_note (NoteStoreIf * iface, AuthenticationResult ** _return, const gchar * guid, const gchar * noteKey, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_authenticate_to_shared_note (NoteStoreIf * iface, const gchar * guid, const gchar * noteKey, const gchar * authenticationToken, GError ** error);
gboolean note_store_client_recv_authenticate_to_shared_note (NoteStoreIf * iface, AuthenticationResult ** _return, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_find_related (NoteStoreIf * iface, RelatedResult ** _return, const gchar * authenticationToken, const RelatedQuery * query, const RelatedResultSpec * resultSpec, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_send_find_related (NoteStoreIf * iface, const gchar * authenticationToken, const RelatedQuery * query, const RelatedResultSpec * resultSpec, GError ** error);
gboolean note_store_client_recv_find_related (NoteStoreIf * iface, RelatedResult ** _return, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError ** error);
gboolean note_store_client_update_note_if_usn_matches (NoteStoreIf * iface, UpdateNoteIfUsnMatchesResult ** _return, const gchar * authenticationToken, const Note * note, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_update_note_if_usn_matches (NoteStoreIf * iface, const gchar * authenticationToken, const Note * note, GError ** error);
gboolean note_store_client_recv_update_note_if_usn_matches (NoteStoreIf * iface, UpdateNoteIfUsnMatchesResult ** _return, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_manage_notebook_shares (NoteStoreIf * iface, ManageNotebookSharesResult ** _return, const gchar * authenticationToken, const ManageNotebookSharesParameters * parameters, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_manage_notebook_shares (NoteStoreIf * iface, const gchar * authenticationToken, const ManageNotebookSharesParameters * parameters, GError ** error);
gboolean note_store_client_recv_manage_notebook_shares (NoteStoreIf * iface, ManageNotebookSharesResult ** _return, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_get_notebook_shares (NoteStoreIf * iface, ShareRelationships ** _return, const gchar * authenticationToken, const gchar * notebookGuid, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
gboolean note_store_client_send_get_notebook_shares (NoteStoreIf * iface, const gchar * authenticationToken, const gchar * notebookGuid, GError ** error);
gboolean note_store_client_recv_get_notebook_shares (NoteStoreIf * iface, ShareRelationships ** _return, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError ** error);
void note_store_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void note_store_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* NoteStore handler (abstract base class) */
struct _NoteStoreHandler
{
  GObject parent;
};
typedef struct _NoteStoreHandler NoteStoreHandler;

struct _NoteStoreHandlerClass
{
  GObjectClass parent;

  gboolean (*get_sync_state) (NoteStoreIf *iface, SyncState ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
  gboolean (*get_filtered_sync_chunk) (NoteStoreIf *iface, SyncChunk ** _return, const gchar * authenticationToken, const gint32 afterUSN, const gint32 maxEntries, const SyncChunkFilter * filter, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
  gboolean (*get_linked_notebook_sync_state) (NoteStoreIf *iface, SyncState ** _return, const gchar * authenticationToken, const LinkedNotebook * linkedNotebook, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_linked_notebook_sync_chunk) (NoteStoreIf *iface, SyncChunk ** _return, const gchar * authenticationToken, const LinkedNotebook * linkedNotebook, const gint32 afterUSN, const gint32 maxEntries, const gboolean fullSyncOnly, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*list_notebooks) (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
  gboolean (*list_accessible_business_notebooks) (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
  gboolean (*get_notebook) (NoteStoreIf *iface, Notebook ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_default_notebook) (NoteStoreIf *iface, Notebook ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
  gboolean (*create_notebook) (NoteStoreIf *iface, Notebook ** _return, const gchar * authenticationToken, const Notebook * notebook, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*update_notebook) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Notebook * notebook, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*expunge_notebook) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*list_tags) (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
  gboolean (*list_tags_by_notebook) (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, const Guid notebookGuid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_tag) (NoteStoreIf *iface, Tag ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*create_tag) (NoteStoreIf *iface, Tag ** _return, const gchar * authenticationToken, const Tag * tag, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*update_tag) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Tag * tag, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*untag_all) (NoteStoreIf *iface, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*expunge_tag) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*list_searches) (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
  gboolean (*get_search) (NoteStoreIf *iface, SavedSearch ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*create_search) (NoteStoreIf *iface, SavedSearch ** _return, const gchar * authenticationToken, const SavedSearch * search, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
  gboolean (*update_search) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const SavedSearch * search, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*expunge_search) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*find_note_offset) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const NoteFilter * filter, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*find_notes_metadata) (NoteStoreIf *iface, NotesMetadataList ** _return, const gchar * authenticationToken, const NoteFilter * filter, const gint32 offset, const gint32 maxNotes, const NotesMetadataResultSpec * resultSpec, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*find_note_counts) (NoteStoreIf *iface, NoteCollectionCounts ** _return, const gchar * authenticationToken, const NoteFilter * filter, const gboolean withTrash, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_note_with_result_spec) (NoteStoreIf *iface, Note ** _return, const gchar * authenticationToken, const Guid guid, const NoteResultSpec * resultSpec, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_note) (NoteStoreIf *iface, Note ** _return, const gchar * authenticationToken, const Guid guid, const gboolean withContent, const gboolean withResourcesData, const gboolean withResourcesRecognition, const gboolean withResourcesAlternateData, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_note_application_data) (NoteStoreIf *iface, LazyMap ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_note_application_data_entry) (NoteStoreIf *iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, const gchar * key, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*set_note_application_data_entry) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, const gchar * key, const gchar * value, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*unset_note_application_data_entry) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, const gchar * key, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_note_content) (NoteStoreIf *iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_note_search_text) (NoteStoreIf *iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, const gboolean noteOnly, const gboolean tokenizeForIndexing, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_resource_search_text) (NoteStoreIf *iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_note_tag_names) (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*create_note) (NoteStoreIf *iface, Note ** _return, const gchar * authenticationToken, const Note * note, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*update_note) (NoteStoreIf *iface, Note ** _return, const gchar * authenticationToken, const Note * note, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*delete_note) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*expunge_note) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*copy_note) (NoteStoreIf *iface, Note ** _return, const gchar * authenticationToken, const Guid noteGuid, const Guid toNotebookGuid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*list_note_versions) (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, const Guid noteGuid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_note_version) (NoteStoreIf *iface, Note ** _return, const gchar * authenticationToken, const Guid noteGuid, const gint32 updateSequenceNum, const gboolean withResourcesData, const gboolean withResourcesRecognition, const gboolean withResourcesAlternateData, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_resource) (NoteStoreIf *iface, Resource ** _return, const gchar * authenticationToken, const Guid guid, const gboolean withData, const gboolean withRecognition, const gboolean withAttributes, const gboolean withAlternateData, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_resource_application_data) (NoteStoreIf *iface, LazyMap ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_resource_application_data_entry) (NoteStoreIf *iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, const gchar * key, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*set_resource_application_data_entry) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, const gchar * key, const gchar * value, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*unset_resource_application_data_entry) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, const gchar * key, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*update_resource) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Resource * resource, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_resource_data) (NoteStoreIf *iface, GByteArray ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_resource_by_hash) (NoteStoreIf *iface, Resource ** _return, const gchar * authenticationToken, const Guid noteGuid, const GByteArray * contentHash, const gboolean withData, const gboolean withRecognition, const gboolean withAlternateData, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_resource_recognition) (NoteStoreIf *iface, GByteArray ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_resource_alternate_data) (NoteStoreIf *iface, GByteArray ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_resource_attributes) (NoteStoreIf *iface, ResourceAttributes ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*get_public_notebook) (NoteStoreIf *iface, Notebook ** _return, const UserID userId, const gchar * publicUri, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*share_notebook) (NoteStoreIf *iface, SharedNotebook ** _return, const gchar * authenticationToken, const SharedNotebook * sharedNotebook, const gchar * message, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*create_or_update_notebook_shares) (NoteStoreIf *iface, CreateOrUpdateNotebookSharesResult ** _return, const gchar * authenticationToken, const NotebookShareTemplate * shareTemplate, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, EDAMInvalidContactsException ** invalidContactsException, GError **error);
  gboolean (*update_shared_notebook) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const SharedNotebook * sharedNotebook, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*set_notebook_recipient_settings) (NoteStoreIf *iface, Notebook ** _return, const gchar * authenticationToken, const gchar * notebookGuid, const NotebookRecipientSettings * recipientSettings, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*list_shared_notebooks) (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*create_linked_notebook) (NoteStoreIf *iface, LinkedNotebook ** _return, const gchar * authenticationToken, const LinkedNotebook * linkedNotebook, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*update_linked_notebook) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const LinkedNotebook * linkedNotebook, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*list_linked_notebooks) (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*expunge_linked_notebook) (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*authenticate_to_shared_notebook) (NoteStoreIf *iface, AuthenticationResult ** _return, const gchar * shareKeyOrGlobalId, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*get_shared_notebook_by_auth) (NoteStoreIf *iface, SharedNotebook ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*email_note) (NoteStoreIf *iface, const gchar * authenticationToken, const NoteEmailParameters * parameters, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*share_note) (NoteStoreIf *iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*stop_sharing_note) (NoteStoreIf *iface, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*authenticate_to_shared_note) (NoteStoreIf *iface, AuthenticationResult ** _return, const gchar * guid, const gchar * noteKey, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*find_related) (NoteStoreIf *iface, RelatedResult ** _return, const gchar * authenticationToken, const RelatedQuery * query, const RelatedResultSpec * resultSpec, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
  gboolean (*update_note_if_usn_matches) (NoteStoreIf *iface, UpdateNoteIfUsnMatchesResult ** _return, const gchar * authenticationToken, const Note * note, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*manage_notebook_shares) (NoteStoreIf *iface, ManageNotebookSharesResult ** _return, const gchar * authenticationToken, const ManageNotebookSharesParameters * parameters, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
  gboolean (*get_notebook_shares) (NoteStoreIf *iface, ShareRelationships ** _return, const gchar * authenticationToken, const gchar * notebookGuid, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
};
typedef struct _NoteStoreHandlerClass NoteStoreHandlerClass;

GType note_store_handler_get_type (void);
#define TYPE_NOTE_STORE_HANDLER (note_store_handler_get_type())
#define NOTE_STORE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_NOTE_STORE_HANDLER, NoteStoreHandler))
#define IS_NOTE_STORE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_NOTE_STORE_HANDLER))
#define NOTE_STORE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_NOTE_STORE_HANDLER, NoteStoreHandlerClass))
#define IS_NOTE_STORE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_NOTE_STORE_HANDLER))
#define NOTE_STORE_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_NOTE_STORE_HANDLER, NoteStoreHandlerClass))

gboolean note_store_handler_get_sync_state (NoteStoreIf *iface, SyncState ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_handler_get_filtered_sync_chunk (NoteStoreIf *iface, SyncChunk ** _return, const gchar * authenticationToken, const gint32 afterUSN, const gint32 maxEntries, const SyncChunkFilter * filter, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_handler_get_linked_notebook_sync_state (NoteStoreIf *iface, SyncState ** _return, const gchar * authenticationToken, const LinkedNotebook * linkedNotebook, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_get_linked_notebook_sync_chunk (NoteStoreIf *iface, SyncChunk ** _return, const gchar * authenticationToken, const LinkedNotebook * linkedNotebook, const gint32 afterUSN, const gint32 maxEntries, const gboolean fullSyncOnly, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_list_notebooks (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_handler_list_accessible_business_notebooks (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_handler_get_notebook (NoteStoreIf *iface, Notebook ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_get_default_notebook (NoteStoreIf *iface, Notebook ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_handler_create_notebook (NoteStoreIf *iface, Notebook ** _return, const gchar * authenticationToken, const Notebook * notebook, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_update_notebook (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Notebook * notebook, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_expunge_notebook (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_list_tags (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_handler_list_tags_by_notebook (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, const Guid notebookGuid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_get_tag (NoteStoreIf *iface, Tag ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_create_tag (NoteStoreIf *iface, Tag ** _return, const gchar * authenticationToken, const Tag * tag, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_update_tag (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Tag * tag, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_untag_all (NoteStoreIf *iface, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_expunge_tag (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_list_searches (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_handler_get_search (NoteStoreIf *iface, SavedSearch ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_create_search (NoteStoreIf *iface, SavedSearch ** _return, const gchar * authenticationToken, const SavedSearch * search, EDAMUserException ** userException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_handler_update_search (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const SavedSearch * search, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_expunge_search (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_find_note_offset (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const NoteFilter * filter, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_find_notes_metadata (NoteStoreIf *iface, NotesMetadataList ** _return, const gchar * authenticationToken, const NoteFilter * filter, const gint32 offset, const gint32 maxNotes, const NotesMetadataResultSpec * resultSpec, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_find_note_counts (NoteStoreIf *iface, NoteCollectionCounts ** _return, const gchar * authenticationToken, const NoteFilter * filter, const gboolean withTrash, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_get_note_with_result_spec (NoteStoreIf *iface, Note ** _return, const gchar * authenticationToken, const Guid guid, const NoteResultSpec * resultSpec, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_get_note (NoteStoreIf *iface, Note ** _return, const gchar * authenticationToken, const Guid guid, const gboolean withContent, const gboolean withResourcesData, const gboolean withResourcesRecognition, const gboolean withResourcesAlternateData, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_get_note_application_data (NoteStoreIf *iface, LazyMap ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_get_note_application_data_entry (NoteStoreIf *iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, const gchar * key, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_set_note_application_data_entry (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, const gchar * key, const gchar * value, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_unset_note_application_data_entry (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, const gchar * key, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_get_note_content (NoteStoreIf *iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_get_note_search_text (NoteStoreIf *iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, const gboolean noteOnly, const gboolean tokenizeForIndexing, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_get_resource_search_text (NoteStoreIf *iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_get_note_tag_names (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_create_note (NoteStoreIf *iface, Note ** _return, const gchar * authenticationToken, const Note * note, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_update_note (NoteStoreIf *iface, Note ** _return, const gchar * authenticationToken, const Note * note, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_delete_note (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_expunge_note (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_copy_note (NoteStoreIf *iface, Note ** _return, const gchar * authenticationToken, const Guid noteGuid, const Guid toNotebookGuid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_list_note_versions (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, const Guid noteGuid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_get_note_version (NoteStoreIf *iface, Note ** _return, const gchar * authenticationToken, const Guid noteGuid, const gint32 updateSequenceNum, const gboolean withResourcesData, const gboolean withResourcesRecognition, const gboolean withResourcesAlternateData, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_get_resource (NoteStoreIf *iface, Resource ** _return, const gchar * authenticationToken, const Guid guid, const gboolean withData, const gboolean withRecognition, const gboolean withAttributes, const gboolean withAlternateData, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_get_resource_application_data (NoteStoreIf *iface, LazyMap ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_get_resource_application_data_entry (NoteStoreIf *iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, const gchar * key, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_set_resource_application_data_entry (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, const gchar * key, const gchar * value, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_unset_resource_application_data_entry (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, const gchar * key, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_update_resource (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Resource * resource, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_get_resource_data (NoteStoreIf *iface, GByteArray ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_get_resource_by_hash (NoteStoreIf *iface, Resource ** _return, const gchar * authenticationToken, const Guid noteGuid, const GByteArray * contentHash, const gboolean withData, const gboolean withRecognition, const gboolean withAlternateData, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_get_resource_recognition (NoteStoreIf *iface, GByteArray ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_get_resource_alternate_data (NoteStoreIf *iface, GByteArray ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_get_resource_attributes (NoteStoreIf *iface, ResourceAttributes ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_get_public_notebook (NoteStoreIf *iface, Notebook ** _return, const UserID userId, const gchar * publicUri, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_share_notebook (NoteStoreIf *iface, SharedNotebook ** _return, const gchar * authenticationToken, const SharedNotebook * sharedNotebook, const gchar * message, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_handler_create_or_update_notebook_shares (NoteStoreIf *iface, CreateOrUpdateNotebookSharesResult ** _return, const gchar * authenticationToken, const NotebookShareTemplate * shareTemplate, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, EDAMInvalidContactsException ** invalidContactsException, GError **error);
gboolean note_store_handler_update_shared_notebook (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const SharedNotebook * sharedNotebook, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_handler_set_notebook_recipient_settings (NoteStoreIf *iface, Notebook ** _return, const gchar * authenticationToken, const gchar * notebookGuid, const NotebookRecipientSettings * recipientSettings, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_handler_list_shared_notebooks (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_handler_create_linked_notebook (NoteStoreIf *iface, LinkedNotebook ** _return, const gchar * authenticationToken, const LinkedNotebook * linkedNotebook, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_handler_update_linked_notebook (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const LinkedNotebook * linkedNotebook, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_handler_list_linked_notebooks (NoteStoreIf *iface, GPtrArray ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_handler_expunge_linked_notebook (NoteStoreIf *iface, gint32* _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_handler_authenticate_to_shared_notebook (NoteStoreIf *iface, AuthenticationResult ** _return, const gchar * shareKeyOrGlobalId, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_handler_get_shared_notebook_by_auth (NoteStoreIf *iface, SharedNotebook ** _return, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_handler_email_note (NoteStoreIf *iface, const gchar * authenticationToken, const NoteEmailParameters * parameters, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_handler_share_note (NoteStoreIf *iface, gchar ** _return, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_handler_stop_sharing_note (NoteStoreIf *iface, const gchar * authenticationToken, const Guid guid, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_handler_authenticate_to_shared_note (NoteStoreIf *iface, AuthenticationResult ** _return, const gchar * guid, const gchar * noteKey, const gchar * authenticationToken, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_handler_find_related (NoteStoreIf *iface, RelatedResult ** _return, const gchar * authenticationToken, const RelatedQuery * query, const RelatedResultSpec * resultSpec, EDAMUserException ** userException, EDAMSystemException ** systemException, EDAMNotFoundException ** notFoundException, GError **error);
gboolean note_store_handler_update_note_if_usn_matches (NoteStoreIf *iface, UpdateNoteIfUsnMatchesResult ** _return, const gchar * authenticationToken, const Note * note, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_handler_manage_notebook_shares (NoteStoreIf *iface, ManageNotebookSharesResult ** _return, const gchar * authenticationToken, const ManageNotebookSharesParameters * parameters, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);
gboolean note_store_handler_get_notebook_shares (NoteStoreIf *iface, ShareRelationships ** _return, const gchar * authenticationToken, const gchar * notebookGuid, EDAMUserException ** userException, EDAMNotFoundException ** notFoundException, EDAMSystemException ** systemException, GError **error);

/* NoteStore processor */
struct _NoteStoreProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  NoteStoreHandler *handler;
  GHashTable *process_map;
};
typedef struct _NoteStoreProcessor NoteStoreProcessor;

struct _NoteStoreProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _NoteStoreProcessorClass NoteStoreProcessorClass;

GType note_store_processor_get_type (void);
#define TYPE_NOTE_STORE_PROCESSOR (note_store_processor_get_type())
#define NOTE_STORE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_NOTE_STORE_PROCESSOR, NoteStoreProcessor))
#define IS_NOTE_STORE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_NOTE_STORE_PROCESSOR))
#define NOTE_STORE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_NOTE_STORE_PROCESSOR, NoteStoreProcessorClass))
#define IS_NOTE_STORE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_NOTE_STORE_PROCESSOR))
#define NOTE_STORE_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_NOTE_STORE_PROCESSOR, NoteStoreProcessorClass))

#endif /* NOTE_STORE_H */
