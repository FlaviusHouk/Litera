/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TYPES_TYPES_H
#define TYPES_TYPES_H

/* base includes */
#include <glib-object.h>
#include <thrift/c_glib/thrift_struct.h>
#include <thrift/c_glib/protocol/thrift_protocol.h>
/* other thrift includes */
#include "limits_types.h"

/* custom thrift includes */

/* begin types */

enum _PrivilegeLevel {
  PRIVILEGE_LEVEL_NORMAL = 1,
  PRIVILEGE_LEVEL_PREMIUM = 3,
  PRIVILEGE_LEVEL_VIP = 5,
  PRIVILEGE_LEVEL_MANAGER = 7,
  PRIVILEGE_LEVEL_SUPPORT = 8,
  PRIVILEGE_LEVEL_ADMIN = 9
};
typedef enum _PrivilegeLevel PrivilegeLevel;

/* return the name of the constant */
const char *
toString_PrivilegeLevel(int value); 

enum _ServiceLevel {
  SERVICE_LEVEL_BASIC = 1,
  SERVICE_LEVEL_PLUS = 2,
  SERVICE_LEVEL_PREMIUM = 3,
  SERVICE_LEVEL_BUSINESS = 4
};
typedef enum _ServiceLevel ServiceLevel;

/* return the name of the constant */
const char *
toString_ServiceLevel(int value); 

enum _QueryFormat {
  QUERY_FORMAT_USER = 1,
  QUERY_FORMAT_SEXP = 2
};
typedef enum _QueryFormat QueryFormat;

/* return the name of the constant */
const char *
toString_QueryFormat(int value); 

enum _NoteSortOrder {
  NOTE_SORT_ORDER_CREATED = 1,
  NOTE_SORT_ORDER_UPDATED = 2,
  NOTE_SORT_ORDER_RELEVANCE = 3,
  NOTE_SORT_ORDER_UPDATE_SEQUENCE_NUMBER = 4,
  NOTE_SORT_ORDER_TITLE = 5
};
typedef enum _NoteSortOrder NoteSortOrder;

/* return the name of the constant */
const char *
toString_NoteSortOrder(int value); 

enum _PremiumOrderStatus {
  PREMIUM_ORDER_STATUS_NONE = 0,
  PREMIUM_ORDER_STATUS_PENDING = 1,
  PREMIUM_ORDER_STATUS_ACTIVE = 2,
  PREMIUM_ORDER_STATUS_FAILED = 3,
  PREMIUM_ORDER_STATUS_CANCELLATION_PENDING = 4,
  PREMIUM_ORDER_STATUS_CANCELED = 5
};
typedef enum _PremiumOrderStatus PremiumOrderStatus;

/* return the name of the constant */
const char *
toString_PremiumOrderStatus(int value); 

enum _SharedNotebookPrivilegeLevel {
  SHARED_NOTEBOOK_PRIVILEGE_LEVEL_READ_NOTEBOOK = 0,
  SHARED_NOTEBOOK_PRIVILEGE_LEVEL_MODIFY_NOTEBOOK_PLUS_ACTIVITY = 1,
  SHARED_NOTEBOOK_PRIVILEGE_LEVEL_READ_NOTEBOOK_PLUS_ACTIVITY = 2,
  SHARED_NOTEBOOK_PRIVILEGE_LEVEL_GROUP = 3,
  SHARED_NOTEBOOK_PRIVILEGE_LEVEL_FULL_ACCESS = 4,
  SHARED_NOTEBOOK_PRIVILEGE_LEVEL_BUSINESS_FULL_ACCESS = 5
};
typedef enum _SharedNotebookPrivilegeLevel SharedNotebookPrivilegeLevel;

/* return the name of the constant */
const char *
toString_SharedNotebookPrivilegeLevel(int value); 

enum _SharedNotePrivilegeLevel {
  SHARED_NOTE_PRIVILEGE_LEVEL_READ_NOTE = 0,
  SHARED_NOTE_PRIVILEGE_LEVEL_MODIFY_NOTE = 1,
  SHARED_NOTE_PRIVILEGE_LEVEL_FULL_ACCESS = 2
};
typedef enum _SharedNotePrivilegeLevel SharedNotePrivilegeLevel;

/* return the name of the constant */
const char *
toString_SharedNotePrivilegeLevel(int value); 

enum _SponsoredGroupRole {
  SPONSORED_GROUP_ROLE_GROUP_MEMBER = 1,
  SPONSORED_GROUP_ROLE_GROUP_ADMIN = 2,
  SPONSORED_GROUP_ROLE_GROUP_OWNER = 3
};
typedef enum _SponsoredGroupRole SponsoredGroupRole;

/* return the name of the constant */
const char *
toString_SponsoredGroupRole(int value); 

enum _BusinessUserRole {
  BUSINESS_USER_ROLE_ADMIN = 1,
  BUSINESS_USER_ROLE_NORMAL = 2
};
typedef enum _BusinessUserRole BusinessUserRole;

/* return the name of the constant */
const char *
toString_BusinessUserRole(int value); 

enum _BusinessUserStatus {
  BUSINESS_USER_STATUS_ACTIVE = 1,
  BUSINESS_USER_STATUS_DEACTIVATED = 2
};
typedef enum _BusinessUserStatus BusinessUserStatus;

/* return the name of the constant */
const char *
toString_BusinessUserStatus(int value); 

enum _SharedNotebookInstanceRestrictions {
  SHARED_NOTEBOOK_INSTANCE_RESTRICTIONS_ASSIGNED = 1,
  SHARED_NOTEBOOK_INSTANCE_RESTRICTIONS_NO_SHARED_NOTEBOOKS = 2
};
typedef enum _SharedNotebookInstanceRestrictions SharedNotebookInstanceRestrictions;

/* return the name of the constant */
const char *
toString_SharedNotebookInstanceRestrictions(int value); 

enum _ReminderEmailConfig {
  REMINDER_EMAIL_CONFIG_DO_NOT_SEND = 1,
  REMINDER_EMAIL_CONFIG_SEND_DAILY_EMAIL = 2
};
typedef enum _ReminderEmailConfig ReminderEmailConfig;

/* return the name of the constant */
const char *
toString_ReminderEmailConfig(int value); 

enum _BusinessInvitationStatus {
  BUSINESS_INVITATION_STATUS_APPROVED = 0,
  BUSINESS_INVITATION_STATUS_REQUESTED = 1,
  BUSINESS_INVITATION_STATUS_REDEEMED = 2
};
typedef enum _BusinessInvitationStatus BusinessInvitationStatus;

/* return the name of the constant */
const char *
toString_BusinessInvitationStatus(int value); 

enum _ContactType {
  CONTACT_TYPE_EVERNOTE = 1,
  CONTACT_TYPE_SMS = 2,
  CONTACT_TYPE_FACEBOOK = 3,
  CONTACT_TYPE_EMAIL = 4,
  CONTACT_TYPE_TWITTER = 5,
  CONTACT_TYPE_LINKEDIN = 6
};
typedef enum _ContactType ContactType;

/* return the name of the constant */
const char *
toString_ContactType(int value); 

enum _EntityType {
  ENTITY_TYPE_NOTE = 1,
  ENTITY_TYPE_NOTEBOOK = 2,
  ENTITY_TYPE_WORKSPACE = 3
};
typedef enum _EntityType EntityType;

/* return the name of the constant */
const char *
toString_EntityType(int value); 

enum _RecipientStatus {
  RECIPIENT_STATUS_NOT_IN_MY_LIST = 1,
  RECIPIENT_STATUS_IN_MY_LIST = 2,
  RECIPIENT_STATUS_IN_MY_LIST_AND_DEFAULT_NOTEBOOK = 3
};
typedef enum _RecipientStatus RecipientStatus;

/* return the name of the constant */
const char *
toString_RecipientStatus(int value); 

enum _CanMoveToContainerStatus {
  CAN_MOVE_TO_CONTAINER_STATUS_CAN_BE_MOVED = 1,
  CAN_MOVE_TO_CONTAINER_STATUS_INSUFFICIENT_ENTITY_PRIVILEGE = 2,
  CAN_MOVE_TO_CONTAINER_STATUS_INSUFFICIENT_CONTAINER_PRIVILEGE = 3
};
typedef enum _CanMoveToContainerStatus CanMoveToContainerStatus;

/* return the name of the constant */
const char *
toString_CanMoveToContainerStatus(int value); 

enum _RelatedContentType {
  RELATED_CONTENT_TYPE_NEWS_ARTICLE = 1,
  RELATED_CONTENT_TYPE_PROFILE_PERSON = 2,
  RELATED_CONTENT_TYPE_PROFILE_ORGANIZATION = 3,
  RELATED_CONTENT_TYPE_REFERENCE_MATERIAL = 4
};
typedef enum _RelatedContentType RelatedContentType;

/* return the name of the constant */
const char *
toString_RelatedContentType(int value); 

enum _RelatedContentAccess {
  RELATED_CONTENT_ACCESS_NOT_ACCESSIBLE = 0,
  RELATED_CONTENT_ACCESS_DIRECT_LINK_ACCESS_OK = 1,
  RELATED_CONTENT_ACCESS_DIRECT_LINK_LOGIN_REQUIRED = 2,
  RELATED_CONTENT_ACCESS_DIRECT_LINK_EMBEDDED_VIEW = 3
};
typedef enum _RelatedContentAccess RelatedContentAccess;

/* return the name of the constant */
const char *
toString_RelatedContentAccess(int value); 

enum _UserIdentityType {
  USER_IDENTITY_TYPE_EVERNOTE_USERID = 1,
  USER_IDENTITY_TYPE_EMAIL = 2,
  USER_IDENTITY_TYPE_IDENTITYID = 3
};
typedef enum _UserIdentityType UserIdentityType;

/* return the name of the constant */
const char *
toString_UserIdentityType(int value); 

typedef gint64 InvalidationSequenceNumber;

typedef gint64 IdentityID;

typedef gint32 UserID;

typedef gchar * Guid;

typedef gint64 Timestamp;

typedef gint64 MessageEventID;

typedef gint64 MessageThreadID;

/* struct Data */
struct _Data
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * bodyHash;
  gboolean __isset_bodyHash;
  gint32 size;
  gboolean __isset_size;
  GByteArray * body;
  gboolean __isset_body;
};
typedef struct _Data Data;

struct _DataClass
{
  ThriftStructClass parent;
};
typedef struct _DataClass DataClass;

GType data_get_type (void);
#define TYPE_DATA (data_get_type())
#define DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DATA, Data))
#define DATA_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_DATA, DataClass))
#define IS_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DATA))
#define IS_DATA_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_DATA))
#define DATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DATA, DataClass))

/* struct UserAttributes */
struct _UserAttributes
{ 
  ThriftStruct parent; 

  /* public */
  gchar * defaultLocationName;
  gboolean __isset_defaultLocationName;
  gdouble defaultLatitude;
  gboolean __isset_defaultLatitude;
  gdouble defaultLongitude;
  gboolean __isset_defaultLongitude;
  gboolean preactivation;
  gboolean __isset_preactivation;
  GPtrArray * viewedPromotions;
  gboolean __isset_viewedPromotions;
  gchar * incomingEmailAddress;
  gboolean __isset_incomingEmailAddress;
  GPtrArray * recentMailedAddresses;
  gboolean __isset_recentMailedAddresses;
  gchar * comments;
  gboolean __isset_comments;
  gint64 dateAgreedToTermsOfService;
  gboolean __isset_dateAgreedToTermsOfService;
  gint32 maxReferrals;
  gboolean __isset_maxReferrals;
  gint32 referralCount;
  gboolean __isset_referralCount;
  gchar * refererCode;
  gboolean __isset_refererCode;
  gint64 sentEmailDate;
  gboolean __isset_sentEmailDate;
  gint32 sentEmailCount;
  gboolean __isset_sentEmailCount;
  gint32 dailyEmailLimit;
  gboolean __isset_dailyEmailLimit;
  gint64 emailOptOutDate;
  gboolean __isset_emailOptOutDate;
  gint64 partnerEmailOptInDate;
  gboolean __isset_partnerEmailOptInDate;
  gchar * preferredLanguage;
  gboolean __isset_preferredLanguage;
  gchar * preferredCountry;
  gboolean __isset_preferredCountry;
  gboolean clipFullPage;
  gboolean __isset_clipFullPage;
  gchar * twitterUserName;
  gboolean __isset_twitterUserName;
  gchar * twitterId;
  gboolean __isset_twitterId;
  gchar * groupName;
  gboolean __isset_groupName;
  gchar * recognitionLanguage;
  gboolean __isset_recognitionLanguage;
  gchar * referralProof;
  gboolean __isset_referralProof;
  gboolean educationalDiscount;
  gboolean __isset_educationalDiscount;
  gchar * businessAddress;
  gboolean __isset_businessAddress;
  gboolean hideSponsorBilling;
  gboolean __isset_hideSponsorBilling;
  gboolean useEmailAutoFiling;
  gboolean __isset_useEmailAutoFiling;
  ReminderEmailConfig reminderEmailConfig;
  gboolean __isset_reminderEmailConfig;
  gint64 emailAddressLastConfirmed;
  gboolean __isset_emailAddressLastConfirmed;
  gint64 passwordUpdated;
  gboolean __isset_passwordUpdated;
  gboolean salesforcePushEnabled;
  gboolean __isset_salesforcePushEnabled;
  gboolean shouldLogClientEvent;
  gboolean __isset_shouldLogClientEvent;
  gboolean optOutMachineLearning;
  gboolean __isset_optOutMachineLearning;
};
typedef struct _UserAttributes UserAttributes;

struct _UserAttributesClass
{
  ThriftStructClass parent;
};
typedef struct _UserAttributesClass UserAttributesClass;

GType user_attributes_get_type (void);
#define TYPE_USER_ATTRIBUTES (user_attributes_get_type())
#define USER_ATTRIBUTES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_USER_ATTRIBUTES, UserAttributes))
#define USER_ATTRIBUTES_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_USER_ATTRIBUTES, UserAttributesClass))
#define IS_USER_ATTRIBUTES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_USER_ATTRIBUTES))
#define IS_USER_ATTRIBUTES_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_USER_ATTRIBUTES))
#define USER_ATTRIBUTES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_USER_ATTRIBUTES, UserAttributesClass))

/* struct BusinessUserAttributes */
struct _BusinessUserAttributes
{ 
  ThriftStruct parent; 

  /* public */
  gchar * title;
  gboolean __isset_title;
  gchar * location;
  gboolean __isset_location;
  gchar * department;
  gboolean __isset_department;
  gchar * mobilePhone;
  gboolean __isset_mobilePhone;
  gchar * linkedInProfileUrl;
  gboolean __isset_linkedInProfileUrl;
  gchar * workPhone;
  gboolean __isset_workPhone;
  gint64 companyStartDate;
  gboolean __isset_companyStartDate;
};
typedef struct _BusinessUserAttributes BusinessUserAttributes;

struct _BusinessUserAttributesClass
{
  ThriftStructClass parent;
};
typedef struct _BusinessUserAttributesClass BusinessUserAttributesClass;

GType business_user_attributes_get_type (void);
#define TYPE_BUSINESS_USER_ATTRIBUTES (business_user_attributes_get_type())
#define BUSINESS_USER_ATTRIBUTES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BUSINESS_USER_ATTRIBUTES, BusinessUserAttributes))
#define BUSINESS_USER_ATTRIBUTES_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_BUSINESS_USER_ATTRIBUTES, BusinessUserAttributesClass))
#define IS_BUSINESS_USER_ATTRIBUTES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BUSINESS_USER_ATTRIBUTES))
#define IS_BUSINESS_USER_ATTRIBUTES_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_BUSINESS_USER_ATTRIBUTES))
#define BUSINESS_USER_ATTRIBUTES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BUSINESS_USER_ATTRIBUTES, BusinessUserAttributesClass))

/* struct Accounting */
struct _Accounting
{ 
  ThriftStruct parent; 

  /* public */
  gint64 uploadLimitEnd;
  gboolean __isset_uploadLimitEnd;
  gint64 uploadLimitNextMonth;
  gboolean __isset_uploadLimitNextMonth;
  PremiumOrderStatus premiumServiceStatus;
  gboolean __isset_premiumServiceStatus;
  gchar * premiumOrderNumber;
  gboolean __isset_premiumOrderNumber;
  gchar * premiumCommerceService;
  gboolean __isset_premiumCommerceService;
  gint64 premiumServiceStart;
  gboolean __isset_premiumServiceStart;
  gchar * premiumServiceSKU;
  gboolean __isset_premiumServiceSKU;
  gint64 lastSuccessfulCharge;
  gboolean __isset_lastSuccessfulCharge;
  gint64 lastFailedCharge;
  gboolean __isset_lastFailedCharge;
  gchar * lastFailedChargeReason;
  gboolean __isset_lastFailedChargeReason;
  gint64 nextPaymentDue;
  gboolean __isset_nextPaymentDue;
  gint64 premiumLockUntil;
  gboolean __isset_premiumLockUntil;
  gint64 updated;
  gboolean __isset_updated;
  gchar * premiumSubscriptionNumber;
  gboolean __isset_premiumSubscriptionNumber;
  gint64 lastRequestedCharge;
  gboolean __isset_lastRequestedCharge;
  gchar * currency;
  gboolean __isset_currency;
  gint32 unitPrice;
  gboolean __isset_unitPrice;
  gint32 businessId;
  gboolean __isset_businessId;
  gchar * businessName;
  gboolean __isset_businessName;
  BusinessUserRole businessRole;
  gboolean __isset_businessRole;
  gint32 unitDiscount;
  gboolean __isset_unitDiscount;
  gint64 nextChargeDate;
  gboolean __isset_nextChargeDate;
  gint32 availablePoints;
  gboolean __isset_availablePoints;
};
typedef struct _Accounting Accounting;

struct _AccountingClass
{
  ThriftStructClass parent;
};
typedef struct _AccountingClass AccountingClass;

GType accounting_get_type (void);
#define TYPE_ACCOUNTING (accounting_get_type())
#define ACCOUNTING(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ACCOUNTING, Accounting))
#define ACCOUNTING_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_ACCOUNTING, AccountingClass))
#define IS_ACCOUNTING(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ACCOUNTING))
#define IS_ACCOUNTING_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_ACCOUNTING))
#define ACCOUNTING_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ACCOUNTING, AccountingClass))

/* struct BusinessUserInfo */
struct _BusinessUserInfo
{ 
  ThriftStruct parent; 

  /* public */
  gint32 businessId;
  gboolean __isset_businessId;
  gchar * businessName;
  gboolean __isset_businessName;
  BusinessUserRole role;
  gboolean __isset_role;
  gchar * email;
  gboolean __isset_email;
  gint64 updated;
  gboolean __isset_updated;
};
typedef struct _BusinessUserInfo BusinessUserInfo;

struct _BusinessUserInfoClass
{
  ThriftStructClass parent;
};
typedef struct _BusinessUserInfoClass BusinessUserInfoClass;

GType business_user_info_get_type (void);
#define TYPE_BUSINESS_USER_INFO (business_user_info_get_type())
#define BUSINESS_USER_INFO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BUSINESS_USER_INFO, BusinessUserInfo))
#define BUSINESS_USER_INFO_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_BUSINESS_USER_INFO, BusinessUserInfoClass))
#define IS_BUSINESS_USER_INFO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BUSINESS_USER_INFO))
#define IS_BUSINESS_USER_INFO_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_BUSINESS_USER_INFO))
#define BUSINESS_USER_INFO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BUSINESS_USER_INFO, BusinessUserInfoClass))

/* struct AccountLimits */
struct _AccountLimits
{ 
  ThriftStruct parent; 

  /* public */
  gint32 userMailLimitDaily;
  gboolean __isset_userMailLimitDaily;
  gint64 noteSizeMax;
  gboolean __isset_noteSizeMax;
  gint64 resourceSizeMax;
  gboolean __isset_resourceSizeMax;
  gint32 userLinkedNotebookMax;
  gboolean __isset_userLinkedNotebookMax;
  gint64 uploadLimit;
  gboolean __isset_uploadLimit;
  gint32 userNoteCountMax;
  gboolean __isset_userNoteCountMax;
  gint32 userNotebookCountMax;
  gboolean __isset_userNotebookCountMax;
  gint32 userTagCountMax;
  gboolean __isset_userTagCountMax;
  gint32 noteTagCountMax;
  gboolean __isset_noteTagCountMax;
  gint32 userSavedSearchesMax;
  gboolean __isset_userSavedSearchesMax;
  gint32 noteResourceCountMax;
  gboolean __isset_noteResourceCountMax;
};
typedef struct _AccountLimits AccountLimits;

struct _AccountLimitsClass
{
  ThriftStructClass parent;
};
typedef struct _AccountLimitsClass AccountLimitsClass;

GType account_limits_get_type (void);
#define TYPE_ACCOUNT_LIMITS (account_limits_get_type())
#define ACCOUNT_LIMITS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ACCOUNT_LIMITS, AccountLimits))
#define ACCOUNT_LIMITS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_ACCOUNT_LIMITS, AccountLimitsClass))
#define IS_ACCOUNT_LIMITS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ACCOUNT_LIMITS))
#define IS_ACCOUNT_LIMITS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_ACCOUNT_LIMITS))
#define ACCOUNT_LIMITS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ACCOUNT_LIMITS, AccountLimitsClass))

/* struct User */
struct _User
{ 
  ThriftStruct parent; 

  /* public */
  gint32 id;
  gboolean __isset_id;
  gchar * username;
  gboolean __isset_username;
  gchar * email;
  gboolean __isset_email;
  gchar * name;
  gboolean __isset_name;
  gchar * timezone;
  gboolean __isset_timezone;
  PrivilegeLevel privilege;
  gboolean __isset_privilege;
  ServiceLevel serviceLevel;
  gboolean __isset_serviceLevel;
  gint64 created;
  gboolean __isset_created;
  gint64 updated;
  gboolean __isset_updated;
  gint64 deleted;
  gboolean __isset_deleted;
  gboolean active;
  gboolean __isset_active;
  gchar * shardId;
  gboolean __isset_shardId;
  UserAttributes * attributes;
  gboolean __isset_attributes;
  Accounting * accounting;
  gboolean __isset_accounting;
  BusinessUserInfo * businessUserInfo;
  gboolean __isset_businessUserInfo;
  gchar * photoUrl;
  gboolean __isset_photoUrl;
  gint64 photoLastUpdated;
  gboolean __isset_photoLastUpdated;
  AccountLimits * accountLimits;
  gboolean __isset_accountLimits;
};
typedef struct _User User;

struct _UserClass
{
  ThriftStructClass parent;
};
typedef struct _UserClass UserClass;

GType user_get_type (void);
#define TYPE_USER (user_get_type())
#define USER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_USER, User))
#define USER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_USER, UserClass))
#define IS_USER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_USER))
#define IS_USER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_USER))
#define USER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_USER, UserClass))

/* struct Contact */
struct _Contact
{ 
  ThriftStruct parent; 

  /* public */
  gchar * name;
  gboolean __isset_name;
  gchar * id;
  gboolean __isset_id;
  ContactType type;
  gboolean __isset_type;
  gchar * photoUrl;
  gboolean __isset_photoUrl;
  gint64 photoLastUpdated;
  gboolean __isset_photoLastUpdated;
  GByteArray * messagingPermit;
  gboolean __isset_messagingPermit;
  gint64 messagingPermitExpires;
  gboolean __isset_messagingPermitExpires;
};
typedef struct _Contact Contact;

struct _ContactClass
{
  ThriftStructClass parent;
};
typedef struct _ContactClass ContactClass;

GType contact_get_type (void);
#define TYPE_CONTACT (contact_get_type())
#define CONTACT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CONTACT, Contact))
#define CONTACT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_CONTACT, ContactClass))
#define IS_CONTACT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CONTACT))
#define IS_CONTACT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_CONTACT))
#define CONTACT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CONTACT, ContactClass))

/* struct Identity */
struct _Identity
{ 
  ThriftStruct parent; 

  /* public */
  gint64 id;
  Contact * contact;
  gboolean __isset_contact;
  gint32 userId;
  gboolean __isset_userId;
  gboolean deactivated;
  gboolean __isset_deactivated;
  gboolean sameBusiness;
  gboolean __isset_sameBusiness;
  gboolean blocked;
  gboolean __isset_blocked;
  gboolean userConnected;
  gboolean __isset_userConnected;
  gint64 eventId;
  gboolean __isset_eventId;
};
typedef struct _Identity Identity;

struct _IdentityClass
{
  ThriftStructClass parent;
};
typedef struct _IdentityClass IdentityClass;

GType identity_get_type (void);
#define TYPE_IDENTITY (identity_get_type())
#define IDENTITY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_IDENTITY, Identity))
#define IDENTITY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_IDENTITY, IdentityClass))
#define IS_IDENTITY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_IDENTITY))
#define IS_IDENTITY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_IDENTITY))
#define IDENTITY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_IDENTITY, IdentityClass))

/* struct Tag */
struct _Tag
{ 
  ThriftStruct parent; 

  /* public */
  gchar * guid;
  gboolean __isset_guid;
  gchar * name;
  gboolean __isset_name;
  gchar * parentGuid;
  gboolean __isset_parentGuid;
  gint32 updateSequenceNum;
  gboolean __isset_updateSequenceNum;
};
typedef struct _Tag Tag;

struct _TagClass
{
  ThriftStructClass parent;
};
typedef struct _TagClass TagClass;

GType tag_get_type (void);
#define TYPE_TAG (tag_get_type())
#define TAG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TAG, Tag))
#define TAG_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_TAG, TagClass))
#define IS_TAG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TAG))
#define IS_TAG_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_TAG))
#define TAG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TAG, TagClass))

/* struct LazyMap */
struct _LazyMap
{ 
  ThriftStruct parent; 

  /* public */
  GHashTable * keysOnly;
  gboolean __isset_keysOnly;
  GHashTable * fullMap;
  gboolean __isset_fullMap;
};
typedef struct _LazyMap LazyMap;

struct _LazyMapClass
{
  ThriftStructClass parent;
};
typedef struct _LazyMapClass LazyMapClass;

GType lazy_map_get_type (void);
#define TYPE_LAZY_MAP (lazy_map_get_type())
#define LAZY_MAP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LAZY_MAP, LazyMap))
#define LAZY_MAP_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_LAZY_MAP, LazyMapClass))
#define IS_LAZY_MAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LAZY_MAP))
#define IS_LAZY_MAP_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_LAZY_MAP))
#define LAZY_MAP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LAZY_MAP, LazyMapClass))

/* struct ResourceAttributes */
struct _ResourceAttributes
{ 
  ThriftStruct parent; 

  /* public */
  gchar * sourceURL;
  gboolean __isset_sourceURL;
  gint64 timestamp;
  gboolean __isset_timestamp;
  gdouble latitude;
  gboolean __isset_latitude;
  gdouble longitude;
  gboolean __isset_longitude;
  gdouble altitude;
  gboolean __isset_altitude;
  gchar * cameraMake;
  gboolean __isset_cameraMake;
  gchar * cameraModel;
  gboolean __isset_cameraModel;
  gboolean clientWillIndex;
  gboolean __isset_clientWillIndex;
  gchar * recoType;
  gboolean __isset_recoType;
  gchar * fileName;
  gboolean __isset_fileName;
  gboolean attachment;
  gboolean __isset_attachment;
  LazyMap * applicationData;
  gboolean __isset_applicationData;
};
typedef struct _ResourceAttributes ResourceAttributes;

struct _ResourceAttributesClass
{
  ThriftStructClass parent;
};
typedef struct _ResourceAttributesClass ResourceAttributesClass;

GType resource_attributes_get_type (void);
#define TYPE_RESOURCE_ATTRIBUTES (resource_attributes_get_type())
#define RESOURCE_ATTRIBUTES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RESOURCE_ATTRIBUTES, ResourceAttributes))
#define RESOURCE_ATTRIBUTES_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_RESOURCE_ATTRIBUTES, ResourceAttributesClass))
#define IS_RESOURCE_ATTRIBUTES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RESOURCE_ATTRIBUTES))
#define IS_RESOURCE_ATTRIBUTES_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_RESOURCE_ATTRIBUTES))
#define RESOURCE_ATTRIBUTES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RESOURCE_ATTRIBUTES, ResourceAttributesClass))

/* struct Resource */
struct _Resource
{ 
  ThriftStruct parent; 

  /* public */
  gchar * guid;
  gboolean __isset_guid;
  gchar * noteGuid;
  gboolean __isset_noteGuid;
  Data * data;
  gboolean __isset_data;
  gchar * mime;
  gboolean __isset_mime;
  gint16 width;
  gboolean __isset_width;
  gint16 height;
  gboolean __isset_height;
  gint16 duration;
  gboolean __isset_duration;
  gboolean active;
  gboolean __isset_active;
  Data * recognition;
  gboolean __isset_recognition;
  ResourceAttributes * attributes;
  gboolean __isset_attributes;
  gint32 updateSequenceNum;
  gboolean __isset_updateSequenceNum;
  Data * alternateData;
  gboolean __isset_alternateData;
};
typedef struct _Resource Resource;

struct _ResourceClass
{
  ThriftStructClass parent;
};
typedef struct _ResourceClass ResourceClass;

GType resource_get_type (void);
#define TYPE_RESOURCE (resource_get_type())
#define RESOURCE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RESOURCE, Resource))
#define RESOURCE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_RESOURCE, ResourceClass))
#define IS_RESOURCE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RESOURCE))
#define IS_RESOURCE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_RESOURCE))
#define RESOURCE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RESOURCE, ResourceClass))

/* struct NoteAttributes */
struct _NoteAttributes
{ 
  ThriftStruct parent; 

  /* public */
  gint64 subjectDate;
  gboolean __isset_subjectDate;
  gdouble latitude;
  gboolean __isset_latitude;
  gdouble longitude;
  gboolean __isset_longitude;
  gdouble altitude;
  gboolean __isset_altitude;
  gchar * author;
  gboolean __isset_author;
  gchar * source;
  gboolean __isset_source;
  gchar * sourceURL;
  gboolean __isset_sourceURL;
  gchar * sourceApplication;
  gboolean __isset_sourceApplication;
  gint64 shareDate;
  gboolean __isset_shareDate;
  gint64 reminderOrder;
  gboolean __isset_reminderOrder;
  gint64 reminderDoneTime;
  gboolean __isset_reminderDoneTime;
  gint64 reminderTime;
  gboolean __isset_reminderTime;
  gchar * placeName;
  gboolean __isset_placeName;
  gchar * contentClass;
  gboolean __isset_contentClass;
  LazyMap * applicationData;
  gboolean __isset_applicationData;
  gchar * lastEditedBy;
  gboolean __isset_lastEditedBy;
  GHashTable * classifications;
  gboolean __isset_classifications;
  gint32 creatorId;
  gboolean __isset_creatorId;
  gint32 lastEditorId;
  gboolean __isset_lastEditorId;
  gboolean sharedWithBusiness;
  gboolean __isset_sharedWithBusiness;
  gchar * conflictSourceNoteGuid;
  gboolean __isset_conflictSourceNoteGuid;
  gint32 noteTitleQuality;
  gboolean __isset_noteTitleQuality;
};
typedef struct _NoteAttributes NoteAttributes;

struct _NoteAttributesClass
{
  ThriftStructClass parent;
};
typedef struct _NoteAttributesClass NoteAttributesClass;

GType note_attributes_get_type (void);
#define TYPE_NOTE_ATTRIBUTES (note_attributes_get_type())
#define NOTE_ATTRIBUTES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_NOTE_ATTRIBUTES, NoteAttributes))
#define NOTE_ATTRIBUTES_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_NOTE_ATTRIBUTES, NoteAttributesClass))
#define IS_NOTE_ATTRIBUTES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_NOTE_ATTRIBUTES))
#define IS_NOTE_ATTRIBUTES_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_NOTE_ATTRIBUTES))
#define NOTE_ATTRIBUTES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_NOTE_ATTRIBUTES, NoteAttributesClass))

/* struct SharedNote */
struct _SharedNote
{ 
  ThriftStruct parent; 

  /* public */
  gint32 sharerUserID;
  gboolean __isset_sharerUserID;
  Identity * recipientIdentity;
  gboolean __isset_recipientIdentity;
  SharedNotePrivilegeLevel privilege;
  gboolean __isset_privilege;
  gint64 serviceCreated;
  gboolean __isset_serviceCreated;
  gint64 serviceUpdated;
  gboolean __isset_serviceUpdated;
  gint64 serviceAssigned;
  gboolean __isset_serviceAssigned;
};
typedef struct _SharedNote SharedNote;

struct _SharedNoteClass
{
  ThriftStructClass parent;
};
typedef struct _SharedNoteClass SharedNoteClass;

GType shared_note_get_type (void);
#define TYPE_SHARED_NOTE (shared_note_get_type())
#define SHARED_NOTE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SHARED_NOTE, SharedNote))
#define SHARED_NOTE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SHARED_NOTE, SharedNoteClass))
#define IS_SHARED_NOTE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SHARED_NOTE))
#define IS_SHARED_NOTE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SHARED_NOTE))
#define SHARED_NOTE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SHARED_NOTE, SharedNoteClass))

/* struct NoteRestrictions */
struct _NoteRestrictions
{ 
  ThriftStruct parent; 

  /* public */
  gboolean noUpdateTitle;
  gboolean __isset_noUpdateTitle;
  gboolean noUpdateContent;
  gboolean __isset_noUpdateContent;
  gboolean noEmail;
  gboolean __isset_noEmail;
  gboolean noShare;
  gboolean __isset_noShare;
  gboolean noSharePublicly;
  gboolean __isset_noSharePublicly;
};
typedef struct _NoteRestrictions NoteRestrictions;

struct _NoteRestrictionsClass
{
  ThriftStructClass parent;
};
typedef struct _NoteRestrictionsClass NoteRestrictionsClass;

GType note_restrictions_get_type (void);
#define TYPE_NOTE_RESTRICTIONS (note_restrictions_get_type())
#define NOTE_RESTRICTIONS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_NOTE_RESTRICTIONS, NoteRestrictions))
#define NOTE_RESTRICTIONS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_NOTE_RESTRICTIONS, NoteRestrictionsClass))
#define IS_NOTE_RESTRICTIONS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_NOTE_RESTRICTIONS))
#define IS_NOTE_RESTRICTIONS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_NOTE_RESTRICTIONS))
#define NOTE_RESTRICTIONS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_NOTE_RESTRICTIONS, NoteRestrictionsClass))

/* struct NoteLimits */
struct _NoteLimits
{ 
  ThriftStruct parent; 

  /* public */
  gint32 noteResourceCountMax;
  gboolean __isset_noteResourceCountMax;
  gint64 uploadLimit;
  gboolean __isset_uploadLimit;
  gint64 resourceSizeMax;
  gboolean __isset_resourceSizeMax;
  gint64 noteSizeMax;
  gboolean __isset_noteSizeMax;
  gint64 uploaded;
  gboolean __isset_uploaded;
};
typedef struct _NoteLimits NoteLimits;

struct _NoteLimitsClass
{
  ThriftStructClass parent;
};
typedef struct _NoteLimitsClass NoteLimitsClass;

GType note_limits_get_type (void);
#define TYPE_NOTE_LIMITS (note_limits_get_type())
#define NOTE_LIMITS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_NOTE_LIMITS, NoteLimits))
#define NOTE_LIMITS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_NOTE_LIMITS, NoteLimitsClass))
#define IS_NOTE_LIMITS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_NOTE_LIMITS))
#define IS_NOTE_LIMITS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_NOTE_LIMITS))
#define NOTE_LIMITS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_NOTE_LIMITS, NoteLimitsClass))

/* struct Note */
struct _Note
{ 
  ThriftStruct parent; 

  /* public */
  gchar * guid;
  gboolean __isset_guid;
  gchar * title;
  gboolean __isset_title;
  gchar * content;
  gboolean __isset_content;
  GByteArray * contentHash;
  gboolean __isset_contentHash;
  gint32 contentLength;
  gboolean __isset_contentLength;
  gint64 created;
  gboolean __isset_created;
  gint64 updated;
  gboolean __isset_updated;
  gint64 deleted;
  gboolean __isset_deleted;
  gboolean active;
  gboolean __isset_active;
  gint32 updateSequenceNum;
  gboolean __isset_updateSequenceNum;
  gchar * notebookGuid;
  gboolean __isset_notebookGuid;
  GPtrArray * tagGuids;
  gboolean __isset_tagGuids;
  GPtrArray * resources;
  gboolean __isset_resources;
  NoteAttributes * attributes;
  gboolean __isset_attributes;
  GPtrArray * tagNames;
  gboolean __isset_tagNames;
  GPtrArray * sharedNotes;
  gboolean __isset_sharedNotes;
  NoteRestrictions * restrictions;
  gboolean __isset_restrictions;
  NoteLimits * limits;
  gboolean __isset_limits;
};
typedef struct _Note Note;

struct _NoteClass
{
  ThriftStructClass parent;
};
typedef struct _NoteClass NoteClass;

GType note_get_type (void);
#define TYPE_NOTE (note_get_type())
#define NOTE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_NOTE, Note))
#define NOTE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_NOTE, NoteClass))
#define IS_NOTE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_NOTE))
#define IS_NOTE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_NOTE))
#define NOTE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_NOTE, NoteClass))

/* struct Publishing */
struct _Publishing
{ 
  ThriftStruct parent; 

  /* public */
  gchar * uri;
  gboolean __isset_uri;
  NoteSortOrder order;
  gboolean __isset_order;
  gboolean ascending;
  gboolean __isset_ascending;
  gchar * publicDescription;
  gboolean __isset_publicDescription;
};
typedef struct _Publishing Publishing;

struct _PublishingClass
{
  ThriftStructClass parent;
};
typedef struct _PublishingClass PublishingClass;

GType publishing_get_type (void);
#define TYPE_PUBLISHING (publishing_get_type())
#define PUBLISHING(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_PUBLISHING, Publishing))
#define PUBLISHING_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_PUBLISHING, PublishingClass))
#define IS_PUBLISHING(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_PUBLISHING))
#define IS_PUBLISHING_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_PUBLISHING))
#define PUBLISHING_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_PUBLISHING, PublishingClass))

/* struct BusinessNotebook */
struct _BusinessNotebook
{ 
  ThriftStruct parent; 

  /* public */
  gchar * notebookDescription;
  gboolean __isset_notebookDescription;
  SharedNotebookPrivilegeLevel privilege;
  gboolean __isset_privilege;
  gboolean recommended;
  gboolean __isset_recommended;
};
typedef struct _BusinessNotebook BusinessNotebook;

struct _BusinessNotebookClass
{
  ThriftStructClass parent;
};
typedef struct _BusinessNotebookClass BusinessNotebookClass;

GType business_notebook_get_type (void);
#define TYPE_BUSINESS_NOTEBOOK (business_notebook_get_type())
#define BUSINESS_NOTEBOOK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BUSINESS_NOTEBOOK, BusinessNotebook))
#define BUSINESS_NOTEBOOK_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_BUSINESS_NOTEBOOK, BusinessNotebookClass))
#define IS_BUSINESS_NOTEBOOK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BUSINESS_NOTEBOOK))
#define IS_BUSINESS_NOTEBOOK_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_BUSINESS_NOTEBOOK))
#define BUSINESS_NOTEBOOK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BUSINESS_NOTEBOOK, BusinessNotebookClass))

/* struct SavedSearchScope */
struct _SavedSearchScope
{ 
  ThriftStruct parent; 

  /* public */
  gboolean includeAccount;
  gboolean __isset_includeAccount;
  gboolean includePersonalLinkedNotebooks;
  gboolean __isset_includePersonalLinkedNotebooks;
  gboolean includeBusinessLinkedNotebooks;
  gboolean __isset_includeBusinessLinkedNotebooks;
};
typedef struct _SavedSearchScope SavedSearchScope;

struct _SavedSearchScopeClass
{
  ThriftStructClass parent;
};
typedef struct _SavedSearchScopeClass SavedSearchScopeClass;

GType saved_search_scope_get_type (void);
#define TYPE_SAVED_SEARCH_SCOPE (saved_search_scope_get_type())
#define SAVED_SEARCH_SCOPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SAVED_SEARCH_SCOPE, SavedSearchScope))
#define SAVED_SEARCH_SCOPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SAVED_SEARCH_SCOPE, SavedSearchScopeClass))
#define IS_SAVED_SEARCH_SCOPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SAVED_SEARCH_SCOPE))
#define IS_SAVED_SEARCH_SCOPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SAVED_SEARCH_SCOPE))
#define SAVED_SEARCH_SCOPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SAVED_SEARCH_SCOPE, SavedSearchScopeClass))

/* struct SavedSearch */
struct _SavedSearch
{ 
  ThriftStruct parent; 

  /* public */
  gchar * guid;
  gboolean __isset_guid;
  gchar * name;
  gboolean __isset_name;
  gchar * query;
  gboolean __isset_query;
  QueryFormat format;
  gboolean __isset_format;
  gint32 updateSequenceNum;
  gboolean __isset_updateSequenceNum;
  SavedSearchScope * scope;
  gboolean __isset_scope;
};
typedef struct _SavedSearch SavedSearch;

struct _SavedSearchClass
{
  ThriftStructClass parent;
};
typedef struct _SavedSearchClass SavedSearchClass;

GType saved_search_get_type (void);
#define TYPE_SAVED_SEARCH (saved_search_get_type())
#define SAVED_SEARCH(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SAVED_SEARCH, SavedSearch))
#define SAVED_SEARCH_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SAVED_SEARCH, SavedSearchClass))
#define IS_SAVED_SEARCH(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SAVED_SEARCH))
#define IS_SAVED_SEARCH_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SAVED_SEARCH))
#define SAVED_SEARCH_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SAVED_SEARCH, SavedSearchClass))

/* struct SharedNotebookRecipientSettings */
struct _SharedNotebookRecipientSettings
{ 
  ThriftStruct parent; 

  /* public */
  gboolean reminderNotifyEmail;
  gboolean __isset_reminderNotifyEmail;
  gboolean reminderNotifyInApp;
  gboolean __isset_reminderNotifyInApp;
};
typedef struct _SharedNotebookRecipientSettings SharedNotebookRecipientSettings;

struct _SharedNotebookRecipientSettingsClass
{
  ThriftStructClass parent;
};
typedef struct _SharedNotebookRecipientSettingsClass SharedNotebookRecipientSettingsClass;

GType shared_notebook_recipient_settings_get_type (void);
#define TYPE_SHARED_NOTEBOOK_RECIPIENT_SETTINGS (shared_notebook_recipient_settings_get_type())
#define SHARED_NOTEBOOK_RECIPIENT_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SHARED_NOTEBOOK_RECIPIENT_SETTINGS, SharedNotebookRecipientSettings))
#define SHARED_NOTEBOOK_RECIPIENT_SETTINGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SHARED_NOTEBOOK_RECIPIENT_SETTINGS, SharedNotebookRecipientSettingsClass))
#define IS_SHARED_NOTEBOOK_RECIPIENT_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SHARED_NOTEBOOK_RECIPIENT_SETTINGS))
#define IS_SHARED_NOTEBOOK_RECIPIENT_SETTINGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SHARED_NOTEBOOK_RECIPIENT_SETTINGS))
#define SHARED_NOTEBOOK_RECIPIENT_SETTINGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SHARED_NOTEBOOK_RECIPIENT_SETTINGS, SharedNotebookRecipientSettingsClass))

/* struct NotebookRecipientSettings */
struct _NotebookRecipientSettings
{ 
  ThriftStruct parent; 

  /* public */
  gboolean reminderNotifyEmail;
  gboolean __isset_reminderNotifyEmail;
  gboolean reminderNotifyInApp;
  gboolean __isset_reminderNotifyInApp;
  gboolean inMyList;
  gboolean __isset_inMyList;
  gchar * stack;
  gboolean __isset_stack;
  RecipientStatus recipientStatus;
  gboolean __isset_recipientStatus;
};
typedef struct _NotebookRecipientSettings NotebookRecipientSettings;

struct _NotebookRecipientSettingsClass
{
  ThriftStructClass parent;
};
typedef struct _NotebookRecipientSettingsClass NotebookRecipientSettingsClass;

GType notebook_recipient_settings_get_type (void);
#define TYPE_NOTEBOOK_RECIPIENT_SETTINGS (notebook_recipient_settings_get_type())
#define NOTEBOOK_RECIPIENT_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_NOTEBOOK_RECIPIENT_SETTINGS, NotebookRecipientSettings))
#define NOTEBOOK_RECIPIENT_SETTINGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_NOTEBOOK_RECIPIENT_SETTINGS, NotebookRecipientSettingsClass))
#define IS_NOTEBOOK_RECIPIENT_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_NOTEBOOK_RECIPIENT_SETTINGS))
#define IS_NOTEBOOK_RECIPIENT_SETTINGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_NOTEBOOK_RECIPIENT_SETTINGS))
#define NOTEBOOK_RECIPIENT_SETTINGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_NOTEBOOK_RECIPIENT_SETTINGS, NotebookRecipientSettingsClass))

/* struct SharedNotebook */
struct _SharedNotebook
{ 
  ThriftStruct parent; 

  /* public */
  gint64 id;
  gboolean __isset_id;
  gint32 userId;
  gboolean __isset_userId;
  gchar * notebookGuid;
  gboolean __isset_notebookGuid;
  gchar * email;
  gboolean __isset_email;
  gint64 recipientIdentityId;
  gboolean __isset_recipientIdentityId;
  gboolean notebookModifiable;
  gboolean __isset_notebookModifiable;
  gint64 serviceCreated;
  gboolean __isset_serviceCreated;
  gint64 serviceUpdated;
  gboolean __isset_serviceUpdated;
  gchar * globalId;
  gboolean __isset_globalId;
  gchar * username;
  gboolean __isset_username;
  SharedNotebookPrivilegeLevel privilege;
  gboolean __isset_privilege;
  SharedNotebookRecipientSettings * recipientSettings;
  gboolean __isset_recipientSettings;
  gint32 sharerUserId;
  gboolean __isset_sharerUserId;
  gchar * recipientUsername;
  gboolean __isset_recipientUsername;
  gint32 recipientUserId;
  gboolean __isset_recipientUserId;
  gint64 serviceAssigned;
  gboolean __isset_serviceAssigned;
};
typedef struct _SharedNotebook SharedNotebook;

struct _SharedNotebookClass
{
  ThriftStructClass parent;
};
typedef struct _SharedNotebookClass SharedNotebookClass;

GType shared_notebook_get_type (void);
#define TYPE_SHARED_NOTEBOOK (shared_notebook_get_type())
#define SHARED_NOTEBOOK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SHARED_NOTEBOOK, SharedNotebook))
#define SHARED_NOTEBOOK_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SHARED_NOTEBOOK, SharedNotebookClass))
#define IS_SHARED_NOTEBOOK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SHARED_NOTEBOOK))
#define IS_SHARED_NOTEBOOK_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SHARED_NOTEBOOK))
#define SHARED_NOTEBOOK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SHARED_NOTEBOOK, SharedNotebookClass))

/* struct CanMoveToContainerRestrictions */
struct _CanMoveToContainerRestrictions
{ 
  ThriftStruct parent; 

  /* public */
  CanMoveToContainerStatus canMoveToContainer;
  gboolean __isset_canMoveToContainer;
};
typedef struct _CanMoveToContainerRestrictions CanMoveToContainerRestrictions;

struct _CanMoveToContainerRestrictionsClass
{
  ThriftStructClass parent;
};
typedef struct _CanMoveToContainerRestrictionsClass CanMoveToContainerRestrictionsClass;

GType can_move_to_container_restrictions_get_type (void);
#define TYPE_CAN_MOVE_TO_CONTAINER_RESTRICTIONS (can_move_to_container_restrictions_get_type())
#define CAN_MOVE_TO_CONTAINER_RESTRICTIONS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CAN_MOVE_TO_CONTAINER_RESTRICTIONS, CanMoveToContainerRestrictions))
#define CAN_MOVE_TO_CONTAINER_RESTRICTIONS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_CAN_MOVE_TO_CONTAINER_RESTRICTIONS, CanMoveToContainerRestrictionsClass))
#define IS_CAN_MOVE_TO_CONTAINER_RESTRICTIONS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CAN_MOVE_TO_CONTAINER_RESTRICTIONS))
#define IS_CAN_MOVE_TO_CONTAINER_RESTRICTIONS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_CAN_MOVE_TO_CONTAINER_RESTRICTIONS))
#define CAN_MOVE_TO_CONTAINER_RESTRICTIONS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CAN_MOVE_TO_CONTAINER_RESTRICTIONS, CanMoveToContainerRestrictionsClass))

/* struct NotebookRestrictions */
struct _NotebookRestrictions
{ 
  ThriftStruct parent; 

  /* public */
  gboolean noReadNotes;
  gboolean __isset_noReadNotes;
  gboolean noCreateNotes;
  gboolean __isset_noCreateNotes;
  gboolean noUpdateNotes;
  gboolean __isset_noUpdateNotes;
  gboolean noExpungeNotes;
  gboolean __isset_noExpungeNotes;
  gboolean noShareNotes;
  gboolean __isset_noShareNotes;
  gboolean noEmailNotes;
  gboolean __isset_noEmailNotes;
  gboolean noSendMessageToRecipients;
  gboolean __isset_noSendMessageToRecipients;
  gboolean noUpdateNotebook;
  gboolean __isset_noUpdateNotebook;
  gboolean noExpungeNotebook;
  gboolean __isset_noExpungeNotebook;
  gboolean noSetDefaultNotebook;
  gboolean __isset_noSetDefaultNotebook;
  gboolean noSetNotebookStack;
  gboolean __isset_noSetNotebookStack;
  gboolean noPublishToPublic;
  gboolean __isset_noPublishToPublic;
  gboolean noPublishToBusinessLibrary;
  gboolean __isset_noPublishToBusinessLibrary;
  gboolean noCreateTags;
  gboolean __isset_noCreateTags;
  gboolean noUpdateTags;
  gboolean __isset_noUpdateTags;
  gboolean noExpungeTags;
  gboolean __isset_noExpungeTags;
  gboolean noSetParentTag;
  gboolean __isset_noSetParentTag;
  gboolean noCreateSharedNotebooks;
  gboolean __isset_noCreateSharedNotebooks;
  SharedNotebookInstanceRestrictions updateWhichSharedNotebookRestrictions;
  gboolean __isset_updateWhichSharedNotebookRestrictions;
  SharedNotebookInstanceRestrictions expungeWhichSharedNotebookRestrictions;
  gboolean __isset_expungeWhichSharedNotebookRestrictions;
  gboolean noShareNotesWithBusiness;
  gboolean __isset_noShareNotesWithBusiness;
  gboolean noRenameNotebook;
  gboolean __isset_noRenameNotebook;
  gboolean noSetInMyList;
  gboolean __isset_noSetInMyList;
  gboolean noChangeContact;
  gboolean __isset_noChangeContact;
  CanMoveToContainerRestrictions * canMoveToContainerRestrictions;
  gboolean __isset_canMoveToContainerRestrictions;
  gboolean noSetReminderNotifyEmail;
  gboolean __isset_noSetReminderNotifyEmail;
  gboolean noSetReminderNotifyInApp;
  gboolean __isset_noSetReminderNotifyInApp;
  gboolean noSetRecipientSettingsStack;
  gboolean __isset_noSetRecipientSettingsStack;
  gboolean noCanMoveNote;
  gboolean __isset_noCanMoveNote;
};
typedef struct _NotebookRestrictions NotebookRestrictions;

struct _NotebookRestrictionsClass
{
  ThriftStructClass parent;
};
typedef struct _NotebookRestrictionsClass NotebookRestrictionsClass;

GType notebook_restrictions_get_type (void);
#define TYPE_NOTEBOOK_RESTRICTIONS (notebook_restrictions_get_type())
#define NOTEBOOK_RESTRICTIONS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_NOTEBOOK_RESTRICTIONS, NotebookRestrictions))
#define NOTEBOOK_RESTRICTIONS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_NOTEBOOK_RESTRICTIONS, NotebookRestrictionsClass))
#define IS_NOTEBOOK_RESTRICTIONS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_NOTEBOOK_RESTRICTIONS))
#define IS_NOTEBOOK_RESTRICTIONS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_NOTEBOOK_RESTRICTIONS))
#define NOTEBOOK_RESTRICTIONS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_NOTEBOOK_RESTRICTIONS, NotebookRestrictionsClass))

/* struct Notebook */
struct _Notebook
{ 
  ThriftStruct parent; 

  /* public */
  gchar * guid;
  gboolean __isset_guid;
  gchar * name;
  gboolean __isset_name;
  gint32 updateSequenceNum;
  gboolean __isset_updateSequenceNum;
  gboolean defaultNotebook;
  gboolean __isset_defaultNotebook;
  gint64 serviceCreated;
  gboolean __isset_serviceCreated;
  gint64 serviceUpdated;
  gboolean __isset_serviceUpdated;
  Publishing * publishing;
  gboolean __isset_publishing;
  gboolean published;
  gboolean __isset_published;
  gchar * stack;
  gboolean __isset_stack;
  GArray * sharedNotebookIds;
  gboolean __isset_sharedNotebookIds;
  GPtrArray * sharedNotebooks;
  gboolean __isset_sharedNotebooks;
  BusinessNotebook * businessNotebook;
  gboolean __isset_businessNotebook;
  User * contact;
  gboolean __isset_contact;
  NotebookRestrictions * restrictions;
  gboolean __isset_restrictions;
  NotebookRecipientSettings * recipientSettings;
  gboolean __isset_recipientSettings;
};
typedef struct _Notebook Notebook;

struct _NotebookClass
{
  ThriftStructClass parent;
};
typedef struct _NotebookClass NotebookClass;

GType notebook_get_type (void);
#define TYPE_NOTEBOOK (notebook_get_type())
#define NOTEBOOK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_NOTEBOOK, Notebook))
#define NOTEBOOK_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_NOTEBOOK, NotebookClass))
#define IS_NOTEBOOK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_NOTEBOOK))
#define IS_NOTEBOOK_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_NOTEBOOK))
#define NOTEBOOK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_NOTEBOOK, NotebookClass))

/* struct LinkedNotebook */
struct _LinkedNotebook
{ 
  ThriftStruct parent; 

  /* public */
  gchar * shareName;
  gboolean __isset_shareName;
  gchar * username;
  gboolean __isset_username;
  gchar * shardId;
  gboolean __isset_shardId;
  gchar * sharedNotebookGlobalId;
  gboolean __isset_sharedNotebookGlobalId;
  gchar * uri;
  gboolean __isset_uri;
  gchar * guid;
  gboolean __isset_guid;
  gint32 updateSequenceNum;
  gboolean __isset_updateSequenceNum;
  gchar * noteStoreUrl;
  gboolean __isset_noteStoreUrl;
  gchar * webApiUrlPrefix;
  gboolean __isset_webApiUrlPrefix;
  gchar * stack;
  gboolean __isset_stack;
  gint32 businessId;
  gboolean __isset_businessId;
};
typedef struct _LinkedNotebook LinkedNotebook;

struct _LinkedNotebookClass
{
  ThriftStructClass parent;
};
typedef struct _LinkedNotebookClass LinkedNotebookClass;

GType linked_notebook_get_type (void);
#define TYPE_LINKED_NOTEBOOK (linked_notebook_get_type())
#define LINKED_NOTEBOOK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LINKED_NOTEBOOK, LinkedNotebook))
#define LINKED_NOTEBOOK_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_LINKED_NOTEBOOK, LinkedNotebookClass))
#define IS_LINKED_NOTEBOOK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LINKED_NOTEBOOK))
#define IS_LINKED_NOTEBOOK_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_LINKED_NOTEBOOK))
#define LINKED_NOTEBOOK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LINKED_NOTEBOOK, LinkedNotebookClass))

/* struct NotebookDescriptor */
struct _NotebookDescriptor
{ 
  ThriftStruct parent; 

  /* public */
  gchar * guid;
  gboolean __isset_guid;
  gchar * notebookDisplayName;
  gboolean __isset_notebookDisplayName;
  gchar * contactName;
  gboolean __isset_contactName;
  gboolean hasSharedNotebook;
  gboolean __isset_hasSharedNotebook;
  gint32 joinedUserCount;
  gboolean __isset_joinedUserCount;
};
typedef struct _NotebookDescriptor NotebookDescriptor;

struct _NotebookDescriptorClass
{
  ThriftStructClass parent;
};
typedef struct _NotebookDescriptorClass NotebookDescriptorClass;

GType notebook_descriptor_get_type (void);
#define TYPE_NOTEBOOK_DESCRIPTOR (notebook_descriptor_get_type())
#define NOTEBOOK_DESCRIPTOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_NOTEBOOK_DESCRIPTOR, NotebookDescriptor))
#define NOTEBOOK_DESCRIPTOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_NOTEBOOK_DESCRIPTOR, NotebookDescriptorClass))
#define IS_NOTEBOOK_DESCRIPTOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_NOTEBOOK_DESCRIPTOR))
#define IS_NOTEBOOK_DESCRIPTOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_NOTEBOOK_DESCRIPTOR))
#define NOTEBOOK_DESCRIPTOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_NOTEBOOK_DESCRIPTOR, NotebookDescriptorClass))

/* struct UserProfile */
struct _UserProfile
{ 
  ThriftStruct parent; 

  /* public */
  gint32 id;
  gboolean __isset_id;
  gchar * name;
  gboolean __isset_name;
  gchar * email;
  gboolean __isset_email;
  gchar * username;
  gboolean __isset_username;
  BusinessUserAttributes * attributes;
  gboolean __isset_attributes;
  gint64 joined;
  gboolean __isset_joined;
  gint64 photoLastUpdated;
  gboolean __isset_photoLastUpdated;
  gchar * photoUrl;
  gboolean __isset_photoUrl;
  BusinessUserRole role;
  gboolean __isset_role;
  BusinessUserStatus status;
  gboolean __isset_status;
};
typedef struct _UserProfile UserProfile;

struct _UserProfileClass
{
  ThriftStructClass parent;
};
typedef struct _UserProfileClass UserProfileClass;

GType user_profile_get_type (void);
#define TYPE_USER_PROFILE (user_profile_get_type())
#define USER_PROFILE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_USER_PROFILE, UserProfile))
#define USER_PROFILE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_USER_PROFILE, UserProfileClass))
#define IS_USER_PROFILE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_USER_PROFILE))
#define IS_USER_PROFILE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_USER_PROFILE))
#define USER_PROFILE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_USER_PROFILE, UserProfileClass))

/* struct RelatedContentImage */
struct _RelatedContentImage
{ 
  ThriftStruct parent; 

  /* public */
  gchar * url;
  gboolean __isset_url;
  gint32 width;
  gboolean __isset_width;
  gint32 height;
  gboolean __isset_height;
  gdouble pixelRatio;
  gboolean __isset_pixelRatio;
  gint32 fileSize;
  gboolean __isset_fileSize;
};
typedef struct _RelatedContentImage RelatedContentImage;

struct _RelatedContentImageClass
{
  ThriftStructClass parent;
};
typedef struct _RelatedContentImageClass RelatedContentImageClass;

GType related_content_image_get_type (void);
#define TYPE_RELATED_CONTENT_IMAGE (related_content_image_get_type())
#define RELATED_CONTENT_IMAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RELATED_CONTENT_IMAGE, RelatedContentImage))
#define RELATED_CONTENT_IMAGE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_RELATED_CONTENT_IMAGE, RelatedContentImageClass))
#define IS_RELATED_CONTENT_IMAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RELATED_CONTENT_IMAGE))
#define IS_RELATED_CONTENT_IMAGE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_RELATED_CONTENT_IMAGE))
#define RELATED_CONTENT_IMAGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RELATED_CONTENT_IMAGE, RelatedContentImageClass))

/* struct RelatedContent */
struct _RelatedContent
{ 
  ThriftStruct parent; 

  /* public */
  gchar * contentId;
  gboolean __isset_contentId;
  gchar * title;
  gboolean __isset_title;
  gchar * url;
  gboolean __isset_url;
  gchar * sourceId;
  gboolean __isset_sourceId;
  gchar * sourceUrl;
  gboolean __isset_sourceUrl;
  gchar * sourceFaviconUrl;
  gboolean __isset_sourceFaviconUrl;
  gchar * sourceName;
  gboolean __isset_sourceName;
  gint64 date;
  gboolean __isset_date;
  gchar * teaser;
  gboolean __isset_teaser;
  GPtrArray * thumbnails;
  gboolean __isset_thumbnails;
  RelatedContentType contentType;
  gboolean __isset_contentType;
  RelatedContentAccess accessType;
  gboolean __isset_accessType;
  gchar * visibleUrl;
  gboolean __isset_visibleUrl;
  gchar * clipUrl;
  gboolean __isset_clipUrl;
  Contact * contact;
  gboolean __isset_contact;
  GPtrArray * authors;
  gboolean __isset_authors;
};
typedef struct _RelatedContent RelatedContent;

struct _RelatedContentClass
{
  ThriftStructClass parent;
};
typedef struct _RelatedContentClass RelatedContentClass;

GType related_content_get_type (void);
#define TYPE_RELATED_CONTENT (related_content_get_type())
#define RELATED_CONTENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RELATED_CONTENT, RelatedContent))
#define RELATED_CONTENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_RELATED_CONTENT, RelatedContentClass))
#define IS_RELATED_CONTENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RELATED_CONTENT))
#define IS_RELATED_CONTENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_RELATED_CONTENT))
#define RELATED_CONTENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RELATED_CONTENT, RelatedContentClass))

/* struct BusinessInvitation */
struct _BusinessInvitation
{ 
  ThriftStruct parent; 

  /* public */
  gint32 businessId;
  gboolean __isset_businessId;
  gchar * email;
  gboolean __isset_email;
  BusinessUserRole role;
  gboolean __isset_role;
  BusinessInvitationStatus status;
  gboolean __isset_status;
  gint32 requesterId;
  gboolean __isset_requesterId;
  gboolean fromWorkChat;
  gboolean __isset_fromWorkChat;
  gint64 created;
  gboolean __isset_created;
  gint64 mostRecentReminder;
  gboolean __isset_mostRecentReminder;
};
typedef struct _BusinessInvitation BusinessInvitation;

struct _BusinessInvitationClass
{
  ThriftStructClass parent;
};
typedef struct _BusinessInvitationClass BusinessInvitationClass;

GType business_invitation_get_type (void);
#define TYPE_BUSINESS_INVITATION (business_invitation_get_type())
#define BUSINESS_INVITATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BUSINESS_INVITATION, BusinessInvitation))
#define BUSINESS_INVITATION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_BUSINESS_INVITATION, BusinessInvitationClass))
#define IS_BUSINESS_INVITATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BUSINESS_INVITATION))
#define IS_BUSINESS_INVITATION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_BUSINESS_INVITATION))
#define BUSINESS_INVITATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BUSINESS_INVITATION, BusinessInvitationClass))

/* struct UserIdentity */
struct _UserIdentity
{ 
  ThriftStruct parent; 

  /* public */
  UserIdentityType type;
  gboolean __isset_type;
  gchar * stringIdentifier;
  gboolean __isset_stringIdentifier;
  gint64 longIdentifier;
  gboolean __isset_longIdentifier;
};
typedef struct _UserIdentity UserIdentity;

struct _UserIdentityClass
{
  ThriftStructClass parent;
};
typedef struct _UserIdentityClass UserIdentityClass;

GType user_identity_get_type (void);
#define TYPE_USER_IDENTITY (user_identity_get_type())
#define USER_IDENTITY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_USER_IDENTITY, UserIdentity))
#define USER_IDENTITY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_USER_IDENTITY, UserIdentityClass))
#define IS_USER_IDENTITY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_USER_IDENTITY))
#define IS_USER_IDENTITY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_USER_IDENTITY))
#define USER_IDENTITY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_USER_IDENTITY, UserIdentityClass))

/* constants */
#define CLASSIFICATION_RECIPE_USER_NON_RECIPE g_strdup ("000")
#define CLASSIFICATION_RECIPE_USER_RECIPE g_strdup ("001")
#define CLASSIFICATION_RECIPE_SERVICE_RECIPE g_strdup ("002")
#define EDAM_NOTE_SOURCE_WEB_CLIP g_strdup ("web.clip")
#define EDAM_NOTE_SOURCE_WEB_CLIP_SIMPLIFIED g_strdup ("Clearly")
#define EDAM_NOTE_SOURCE_MAIL_CLIP g_strdup ("mail.clip")
#define EDAM_NOTE_SOURCE_MAIL_SMTP_GATEWAY g_strdup ("mail.smtp")

#endif /* TYPES_TYPES_H */
