/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ERRORS_TYPES_H
#define ERRORS_TYPES_H

/* base includes */
#include <glib-object.h>
#include <thrift/c_glib/thrift_struct.h>
#include <thrift/c_glib/protocol/thrift_protocol.h>
/* other thrift includes */
#include "types_types.h"

/* custom thrift includes */

/* begin types */

enum _EDAMErrorCode {
  E_D_A_M_ERROR_CODE_UNKNOWN = 1,
  E_D_A_M_ERROR_CODE_BAD_DATA_FORMAT = 2,
  E_D_A_M_ERROR_CODE_PERMISSION_DENIED = 3,
  E_D_A_M_ERROR_CODE_INTERNAL_ERROR = 4,
  E_D_A_M_ERROR_CODE_DATA_REQUIRED = 5,
  E_D_A_M_ERROR_CODE_LIMIT_REACHED = 6,
  E_D_A_M_ERROR_CODE_QUOTA_REACHED = 7,
  E_D_A_M_ERROR_CODE_INVALID_AUTH = 8,
  E_D_A_M_ERROR_CODE_AUTH_EXPIRED = 9,
  E_D_A_M_ERROR_CODE_DATA_CONFLICT = 10,
  E_D_A_M_ERROR_CODE_ENML_VALIDATION = 11,
  E_D_A_M_ERROR_CODE_SHARD_UNAVAILABLE = 12,
  E_D_A_M_ERROR_CODE_LEN_TOO_SHORT = 13,
  E_D_A_M_ERROR_CODE_LEN_TOO_LONG = 14,
  E_D_A_M_ERROR_CODE_TOO_FEW = 15,
  E_D_A_M_ERROR_CODE_TOO_MANY = 16,
  E_D_A_M_ERROR_CODE_UNSUPPORTED_OPERATION = 17,
  E_D_A_M_ERROR_CODE_TAKEN_DOWN = 18,
  E_D_A_M_ERROR_CODE_RATE_LIMIT_REACHED = 19,
  E_D_A_M_ERROR_CODE_BUSINESS_SECURITY_LOGIN_REQUIRED = 20,
  E_D_A_M_ERROR_CODE_DEVICE_LIMIT_REACHED = 21,
  E_D_A_M_ERROR_CODE_OPENID_ALREADY_TAKEN = 22,
  E_D_A_M_ERROR_CODE_INVALID_OPENID_TOKEN = 23,
  E_D_A_M_ERROR_CODE_USER_NOT_ASSOCIATED = 24,
  E_D_A_M_ERROR_CODE_USER_NOT_REGISTERED = 25,
  E_D_A_M_ERROR_CODE_USER_ALREADY_ASSOCIATED = 26,
  E_D_A_M_ERROR_CODE_ACCOUNT_CLEAR = 27,
  E_D_A_M_ERROR_CODE_SSO_AUTHENTICATION_REQUIRED = 28
};
typedef enum _EDAMErrorCode EDAMErrorCode;

/* return the name of the constant */
const char *
toString_EDAMErrorCode(int value); 

enum _EDAMInvalidContactReason {
  E_D_A_M_INVALID_CONTACT_REASON_BAD_ADDRESS = 0,
  E_D_A_M_INVALID_CONTACT_REASON_DUPLICATE_CONTACT = 1,
  E_D_A_M_INVALID_CONTACT_REASON_NO_CONNECTION = 2
};
typedef enum _EDAMInvalidContactReason EDAMInvalidContactReason;

/* return the name of the constant */
const char *
toString_EDAMInvalidContactReason(int value); 

struct _EDAMUserException
{ 
  ThriftStruct parent; 

  /* public */
  EDAMErrorCode errorCode;
  gchar * parameter;
  gboolean __isset_parameter;
};
typedef struct _EDAMUserException EDAMUserException;

struct _EDAMUserExceptionClass
{
  ThriftStructClass parent;
};
typedef struct _EDAMUserExceptionClass EDAMUserExceptionClass;

GType e_d_a_m_user_exception_get_type (void);
#define TYPE_E_D_A_M_USER_EXCEPTION (e_d_a_m_user_exception_get_type())
#define E_D_A_M_USER_EXCEPTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_E_D_A_M_USER_EXCEPTION, EDAMUserException))
#define E_D_A_M_USER_EXCEPTION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_E_D_A_M_USER_EXCEPTION, EDAMUserExceptionClass))
#define IS_E_D_A_M_USER_EXCEPTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_E_D_A_M_USER_EXCEPTION))
#define IS_E_D_A_M_USER_EXCEPTION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_E_D_A_M_USER_EXCEPTION))
#define E_D_A_M_USER_EXCEPTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_E_D_A_M_USER_EXCEPTION, EDAMUserExceptionClass))

/* exception */
typedef enum
{
  E_D_A_M_USER_EXCEPTION_ERROR_CODE
} EDAMUserExceptionError;

GQuark e_d_a_m_user_exception_error_quark (void);
#define E_D_A_M_USER_EXCEPTION_ERROR (e_d_a_m_user_exception_error_quark())


struct _EDAMSystemException
{ 
  ThriftStruct parent; 

  /* public */
  EDAMErrorCode errorCode;
  gchar * message;
  gboolean __isset_message;
  gint32 rateLimitDuration;
  gboolean __isset_rateLimitDuration;
};
typedef struct _EDAMSystemException EDAMSystemException;

struct _EDAMSystemExceptionClass
{
  ThriftStructClass parent;
};
typedef struct _EDAMSystemExceptionClass EDAMSystemExceptionClass;

GType e_d_a_m_system_exception_get_type (void);
#define TYPE_E_D_A_M_SYSTEM_EXCEPTION (e_d_a_m_system_exception_get_type())
#define E_D_A_M_SYSTEM_EXCEPTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_E_D_A_M_SYSTEM_EXCEPTION, EDAMSystemException))
#define E_D_A_M_SYSTEM_EXCEPTION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_E_D_A_M_SYSTEM_EXCEPTION, EDAMSystemExceptionClass))
#define IS_E_D_A_M_SYSTEM_EXCEPTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_E_D_A_M_SYSTEM_EXCEPTION))
#define IS_E_D_A_M_SYSTEM_EXCEPTION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_E_D_A_M_SYSTEM_EXCEPTION))
#define E_D_A_M_SYSTEM_EXCEPTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_E_D_A_M_SYSTEM_EXCEPTION, EDAMSystemExceptionClass))

/* exception */
typedef enum
{
  E_D_A_M_SYSTEM_EXCEPTION_ERROR_CODE
} EDAMSystemExceptionError;

GQuark e_d_a_m_system_exception_error_quark (void);
#define E_D_A_M_SYSTEM_EXCEPTION_ERROR (e_d_a_m_system_exception_error_quark())


struct _EDAMNotFoundException
{ 
  ThriftStruct parent; 

  /* public */
  gchar * identifier;
  gboolean __isset_identifier;
  gchar * key;
  gboolean __isset_key;
};
typedef struct _EDAMNotFoundException EDAMNotFoundException;

struct _EDAMNotFoundExceptionClass
{
  ThriftStructClass parent;
};
typedef struct _EDAMNotFoundExceptionClass EDAMNotFoundExceptionClass;

GType e_d_a_m_not_found_exception_get_type (void);
#define TYPE_E_D_A_M_NOT_FOUND_EXCEPTION (e_d_a_m_not_found_exception_get_type())
#define E_D_A_M_NOT_FOUND_EXCEPTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_E_D_A_M_NOT_FOUND_EXCEPTION, EDAMNotFoundException))
#define E_D_A_M_NOT_FOUND_EXCEPTION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_E_D_A_M_NOT_FOUND_EXCEPTION, EDAMNotFoundExceptionClass))
#define IS_E_D_A_M_NOT_FOUND_EXCEPTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_E_D_A_M_NOT_FOUND_EXCEPTION))
#define IS_E_D_A_M_NOT_FOUND_EXCEPTION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_E_D_A_M_NOT_FOUND_EXCEPTION))
#define E_D_A_M_NOT_FOUND_EXCEPTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_E_D_A_M_NOT_FOUND_EXCEPTION, EDAMNotFoundExceptionClass))

/* exception */
typedef enum
{
  E_D_A_M_NOT_FOUND_EXCEPTION_ERROR_CODE
} EDAMNotFoundExceptionError;

GQuark e_d_a_m_not_found_exception_error_quark (void);
#define E_D_A_M_NOT_FOUND_EXCEPTION_ERROR (e_d_a_m_not_found_exception_error_quark())


struct _EDAMInvalidContactsException
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * contacts;
  gchar * parameter;
  gboolean __isset_parameter;
  GArray * reasons;
  gboolean __isset_reasons;
};
typedef struct _EDAMInvalidContactsException EDAMInvalidContactsException;

struct _EDAMInvalidContactsExceptionClass
{
  ThriftStructClass parent;
};
typedef struct _EDAMInvalidContactsExceptionClass EDAMInvalidContactsExceptionClass;

GType e_d_a_m_invalid_contacts_exception_get_type (void);
#define TYPE_E_D_A_M_INVALID_CONTACTS_EXCEPTION (e_d_a_m_invalid_contacts_exception_get_type())
#define E_D_A_M_INVALID_CONTACTS_EXCEPTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_E_D_A_M_INVALID_CONTACTS_EXCEPTION, EDAMInvalidContactsException))
#define E_D_A_M_INVALID_CONTACTS_EXCEPTION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_E_D_A_M_INVALID_CONTACTS_EXCEPTION, EDAMInvalidContactsExceptionClass))
#define IS_E_D_A_M_INVALID_CONTACTS_EXCEPTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_E_D_A_M_INVALID_CONTACTS_EXCEPTION))
#define IS_E_D_A_M_INVALID_CONTACTS_EXCEPTION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_E_D_A_M_INVALID_CONTACTS_EXCEPTION))
#define E_D_A_M_INVALID_CONTACTS_EXCEPTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_E_D_A_M_INVALID_CONTACTS_EXCEPTION, EDAMInvalidContactsExceptionClass))

/* exception */
typedef enum
{
  E_D_A_M_INVALID_CONTACTS_EXCEPTION_ERROR_CODE
} EDAMInvalidContactsExceptionError;

GQuark e_d_a_m_invalid_contacts_exception_error_quark (void);
#define E_D_A_M_INVALID_CONTACTS_EXCEPTION_ERROR (e_d_a_m_invalid_contacts_exception_error_quark())


/* constants */

#endif /* ERRORS_TYPES_H */
